/**
 * Mock Data Service
 * 
 * Provides comprehensive mock data that exactly matches backend models.
 * Can be toggled on/off via environment variable or runtime flag.
 */

import type { 
  BusinessTableInfoDto, 
  BusinessColumnInfoDto, 
  BusinessGlossaryDto 
} from '../store/api/businessApi'
import type { 
  AuthenticationResult, 
  UserInfo, 
  UserActivitySummary 
} from '../store/api/authApi'
import type { 
  EnhancedQueryResponse, 
  QueryHistoryItem, 
  QueryMetadata,
  QuerySemanticAnalysis 
} from '../store/api/queryApi'

// Configuration
export const MOCK_DATA_CONFIG = {
  enabled: import.meta.env.DEV && import.meta.env.VITE_USE_MOCK_DATA !== 'false',
  delay: Number(import.meta.env.VITE_MOCK_DELAY) || 500, // Simulate network delay
  errorRate: 0.02, // 2% error rate for testing
}

// Utility functions
const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms))

const simulateNetworkDelay = () => delay(MOCK_DATA_CONFIG.delay)

const shouldSimulateError = () => Math.random() < MOCK_DATA_CONFIG.errorRate

const generateId = () => Math.floor(Math.random() * 10000) + 1

// Mock Authentication Data
export const mockUsers: UserInfo[] = [
  {
    id: '1',
    username: 'admin',
    email: 'admin@bicopilot.com',
    displayName: 'System Administrator',
    roles: ['Admin', 'User'],
    isActive: true,
    lastLoginDate: new Date().toISOString(),
    isMfaEnabled: true,
    mfaMethod: 'TOTP',
    preferences: {
      theme: 'light',
      language: 'en',
      timezone: 'UTC',
      defaultQueryLimit: 1000,
      enableNotifications: true,
      autoSaveQueries: true,
      preferredChartTypes: ['bar', 'line', 'pie']
    },
    activitySummary: {
      totalQueries: 1247,
      queriesThisWeek: 23,
      averageQueryTime: 2.3,
      favoriteChartTypes: ['bar', 'line'],
      lastActiveDate: new Date().toISOString()
    }
  },
  {
    id: '2',
    username: 'analyst',
    email: 'analyst@bicopilot.com',
    displayName: 'Data Analyst',
    roles: ['User'],
    isActive: true,
    lastLoginDate: new Date(Date.now() - 86400000).toISOString(),
    isMfaEnabled: false,
    preferences: {
      theme: 'dark',
      language: 'en',
      timezone: 'EST',
      defaultQueryLimit: 500,
      enableNotifications: true,
      autoSaveQueries: true,
      preferredChartTypes: ['line', 'scatter']
    },
    activitySummary: {
      totalQueries: 892,
      queriesThisWeek: 15,
      averageQueryTime: 1.8,
      favoriteChartTypes: ['line', 'scatter'],
      lastActiveDate: new Date(Date.now() - 3600000).toISOString()
    }
  }
]

// Mock Business Tables Data
export const mockBusinessTables: BusinessTableInfoDto[] = [
  {
    id: 1,
    tableName: 'Customers',
    schemaName: 'Sales',
    businessPurpose: 'Store customer information and contact details for sales and marketing activities',
    businessContext: 'Central customer repository containing all customer data including demographics, contact information, and account status',
    primaryUseCase: 'Customer relationship management and sales analytics',
    commonQueryPatterns: 'Customer lookup by ID, region-based customer analysis, customer segmentation queries',
    businessRules: 'Each customer must have unique email, phone numbers are optional, status must be Active/Inactive',
    domainClassification: 'Customer Management',
    naturalLanguageAliases: 'clients, buyers, purchasers, customer base',
    usagePatterns: 'High read frequency during business hours, batch updates nightly',
    dataQualityIndicators: 'Email format validation, phone number format, required fields completion',
    relationshipSemantics: 'One-to-many with Orders, many-to-many with Products via Orders',
    importanceScore: 9,
    usageFrequency: 85,
    businessOwner: 'Sales Team',
    dataGovernancePolicies: 'PII data, GDPR compliant, retention policy 7 years',
    isActive: true,
    createdDate: '2024-01-15T10:30:00Z',
    updatedDate: '2024-06-15T14:22:00Z',
    columns: [
      {
        id: 1,
        tableInfoId: 1,
        columnName: 'CustomerID',
        businessMeaning: 'Unique identifier for each customer',
        businessContext: 'Primary key used across all systems to identify customers',
        dataExamples: '1001, 1002, 1003',
        validationRules: 'Must be unique, auto-generated, positive integer',
        naturalLanguageAliases: 'customer id, client id, customer number',
        valueExamples: '1001, 1002, 1003, 1004, 1005',
        dataLineage: 'Generated by CRM system, propagated to all downstream systems',
        calculationRules: 'Auto-increment starting from 1001',
        semanticTags: 'identifier, primary_key, customer',
        businessDataType: 'Identifier',
        constraintsAndRules: 'NOT NULL, UNIQUE, AUTO_INCREMENT',
        dataQualityScore: 10,
        usageFrequency: 95,
        preferredAggregation: 'COUNT',
        relatedBusinessTerms: 'Customer, Client, Account',
        isKeyColumn: true,
        isSensitiveData: false,
        isCalculatedField: false,
        isActive: true
      },
      {
        id: 2,
        tableInfoId: 1,
        columnName: 'Email',
        businessMeaning: 'Primary email address for customer communication',
        businessContext: 'Used for marketing campaigns, order confirmations, and customer support',
        dataExamples: 'john.doe@email.com, jane.smith@company.com',
        validationRules: 'Valid email format, unique across customers',
        naturalLanguageAliases: 'email address, contact email, primary email',
        valueExamples: 'john.doe@email.com, jane.smith@company.com, bob@test.com',
        dataLineage: 'Collected at registration, updated via customer portal',
        calculationRules: 'No calculation, direct input',
        semanticTags: 'contact, email, communication',
        businessDataType: 'Email',
        constraintsAndRules: 'UNIQUE, EMAIL_FORMAT, NOT NULL',
        dataQualityScore: 9,
        usageFrequency: 80,
        preferredAggregation: 'COUNT',
        relatedBusinessTerms: 'Contact, Communication, Marketing',
        isKeyColumn: false,
        isSensitiveData: true,
        isCalculatedField: false,
        isActive: true
      }
    ]
  },
  {
    id: 2,
    tableName: 'Orders',
    schemaName: 'Sales',
    businessPurpose: 'Track all customer orders and purchase transactions',
    businessContext: 'Comprehensive order management including order details, status tracking, and financial information',
    primaryUseCase: 'Order processing, sales reporting, and revenue analysis',
    commonQueryPatterns: 'Orders by date range, customer order history, order status tracking, revenue calculations',
    businessRules: 'Each order must have valid customer, order total calculated from line items, status workflow enforced',
    domainClassification: 'Order Management',
    naturalLanguageAliases: 'purchases, transactions, sales orders, customer orders',
    usagePatterns: 'High write frequency during business hours, read-heavy for reporting',
    dataQualityIndicators: 'Order total matches line items, valid status transitions, customer references exist',
    relationshipSemantics: 'Many-to-one with Customers, one-to-many with OrderItems',
    importanceScore: 10,
    usageFrequency: 90,
    businessOwner: 'Sales Operations',
    dataGovernancePolicies: 'Financial data, SOX compliance, retention policy 10 years',
    isActive: true,
    createdDate: '2024-01-15T10:30:00Z',
    updatedDate: '2024-06-20T09:15:00Z',
    columns: []
  }
]

// Mock Business Glossary Data
export const mockBusinessGlossary: BusinessGlossaryDto[] = [
  {
    id: 1,
    term: 'Customer Lifetime Value',
    definition: 'The total revenue a business can reasonably expect from a single customer account throughout the business relationship',
    businessContext: 'Used for customer segmentation, marketing budget allocation, and retention strategy planning',
    synonyms: 'CLV, LTV, Customer Value',
    relatedTerms: 'Customer Acquisition Cost, Retention Rate, Average Order Value',
    category: 'Financial Metrics',
    domain: 'Customer Analytics',
    examples: 'High-value customers with CLV > $10,000, Enterprise customers typically have higher CLV',
    mappedTables: 'Customers, Orders, OrderItems',
    mappedColumns: 'CustomerID, OrderTotal, OrderDate',
    hierarchicalRelations: 'Parent: Customer Metrics, Children: Monthly CLV, Annual CLV',
    preferredCalculation: 'SUM(OrderTotal) / COUNT(DISTINCT CustomerID) over customer lifetime',
    disambiguationRules: 'Always refers to monetary value, not customer satisfaction scores',
    businessOwner: 'Customer Analytics Team',
    regulationReferences: 'Financial reporting standards for revenue recognition',
    confidenceScore: 9.5,
    ambiguityScore: 1.2,
    contextualVariations: 'B2B vs B2C calculations differ, subscription vs one-time purchase models',
    usageCount: 156,
    lastUsed: new Date(Date.now() - 86400000).toISOString(),
    lastValidated: new Date(Date.now() - 604800000).toISOString(),
    isActive: true
  }
]

// Mock Query History Data
export const mockQueryHistory: QueryHistoryItem[] = [
  {
    id: '1',
    question: 'Show me the top 10 customers by total order value',
    sql: 'SELECT c.CustomerID, c.Email, SUM(o.OrderTotal) as TotalValue FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID, c.Email ORDER BY TotalValue DESC LIMIT 10',
    executedAt: new Date(Date.now() - 3600000).toISOString(),
    executionTime: 1.2,
    rowCount: 10,
    isFavorite: true,
    tags: ['customers', 'revenue', 'top-performers']
  },
  {
    id: '2',
    question: 'What are the monthly sales trends for this year?',
    sql: 'SELECT DATE_FORMAT(OrderDate, "%Y-%m") as Month, SUM(OrderTotal) as MonthlySales FROM Orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) GROUP BY Month ORDER BY Month',
    executedAt: new Date(Date.now() - 7200000).toISOString(),
    executionTime: 0.8,
    rowCount: 6,
    isFavorite: false,
    tags: ['sales', 'trends', 'monthly']
  }
]

// Mock Data Service Class
export class MockDataService {
  static isEnabled(): boolean {
    return MOCK_DATA_CONFIG.enabled
  }

  static async simulateApiCall<T>(data: T, shouldError = false): Promise<T> {
    await simulateNetworkDelay()
    
    if (shouldError || shouldSimulateError()) {
      throw new Error('Simulated API error for testing')
    }
    
    return data
  }

  // Authentication Mock Methods
  static async login(username: string, password: string): Promise<AuthenticationResult> {
    // Allow any username/password combination in mock mode for easy testing
    const user = mockUsers.find(u => u.username === username) || mockUsers[0]

    // In mock mode, accept common test passwords or any password
    const validPasswords = ['password', 'admin', 'test', '123456', 'demo']
    const isValidPassword = validPasswords.includes(password.toLowerCase()) || password.length >= 3

    if (!isValidPassword) {
      throw new Error('Password must be at least 3 characters')
    }

    // Always succeed in mock mode with valid user data
    return this.simulateApiCall({
      success: true,
      accessToken: 'mock-access-token-' + Date.now(),
      refreshToken: 'mock-refresh-token-' + Date.now(),
      expiresAt: new Date(Date.now() + 3600000).toISOString(),
      user: {
        id: user.id,
        username: username, // Use the entered username
        email: user.email,
        displayName: user.displayName,
        roles: user.roles,
        isActive: user.isActive,
        lastLoginDate: new Date().toISOString(),
        isMfaEnabled: user.isMfaEnabled,
        mfaMethod: user.mfaMethod
      }
    })
  }

  // Quick login method for development
  static async quickLogin(): Promise<AuthenticationResult> {
    return this.login('admin', 'password')
  }

  static async getCurrentUser(): Promise<UserInfo> {
    return this.simulateApiCall(mockUsers[0])
  }

  // Business Data Mock Methods
  static async getBusinessTables(): Promise<BusinessTableInfoDto[]> {
    return this.simulateApiCall(mockBusinessTables)
  }

  static async getBusinessGlossary(): Promise<{ terms: BusinessGlossaryDto[]; total: number }> {
    return this.simulateApiCall({
      terms: mockBusinessGlossary,
      total: mockBusinessGlossary.length
    })
  }

  static async getQueryHistory(): Promise<{ queries: QueryHistoryItem[]; total: number; page: number }> {
    return this.simulateApiCall({
      queries: mockQueryHistory,
      total: mockQueryHistory.length,
      page: 1
    })
  }

  // Enhanced Query Mock Methods
  static async executeEnhancedQuery(query: string): Promise<EnhancedQueryResponse> {
    const mockSemanticAnalysis: QuerySemanticAnalysis = {
      intent: 'Aggregation',
      entities: [
        { name: 'customers', type: 'table', confidence: 0.95 },
        { name: 'revenue', type: 'metric', confidence: 0.88 }
      ],
      businessTerms: ['customers', 'total sales', 'revenue'],
      confidence: 0.92,
      ambiguities: [],
      suggestedClarifications: []
    }

    const mockMetadata: QueryMetadata = {
      executionTime: 1.2,
      rowCount: 10,
      columnCount: 3,
      queryComplexity: 'Medium',
      tablesUsed: ['Customers', 'Orders'],
      estimatedCost: 0.05
    }

    const mockResults = [
      { CustomerID: 1001, Email: 'john.doe@email.com', TotalValue: 15420.50 },
      { CustomerID: 1002, Email: 'jane.smith@company.com', TotalValue: 12890.25 },
      { CustomerID: 1003, Email: 'bob.wilson@test.com', TotalValue: 11250.00 }
    ]

    return this.simulateApiCall({
      sql: 'SELECT c.CustomerID, c.Email, SUM(o.OrderTotal) as TotalValue FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID, c.Email ORDER BY TotalValue DESC LIMIT 10',
      explanation: 'This query joins the Customers and Orders tables to calculate the total order value for each customer, then sorts by total value in descending order and limits to top 10 results.',
      confidence: 0.92,
      semanticAnalysis: mockSemanticAnalysis,
      suggestedOptimizations: [
        'Consider adding an index on Orders.CustomerID for better join performance',
        'Use LIMIT with ORDER BY for better performance on large datasets'
      ],
      estimatedExecutionTime: 1.2,
      results: mockResults,
      metadata: mockMetadata
    })
  }

  // Admin/Analytics Mock Methods
  static async getSystemStatistics() {
    return this.simulateApiCall({
      totalUsers: 156,
      activeUsers: 89,
      totalQueries: 12847,
      queriesThisWeek: 1247,
      averageQueryTime: 2.1,
      systemUptime: '99.8%',
      databaseSize: '2.4 GB',
      lastBackup: new Date(Date.now() - 86400000).toISOString()
    })
  }

  static async getCostMetrics(timeRange: string) {
    return this.simulateApiCall({
      analytics: {
        totalCost: 1247.50,
        averageCostPerQuery: 0.12,
        costTrend: 'increasing',
        topCostDrivers: ['Complex Joins', 'Large Result Sets', 'Frequent Queries']
      },
      trends: [
        { date: '2024-06-01', cost: 45.20 },
        { date: '2024-06-02', cost: 52.10 },
        { date: '2024-06-03', cost: 48.90 },
        { date: '2024-06-04', cost: 61.30 },
        { date: '2024-06-05', cost: 55.80 }
      ],
      realTime: {
        currentCost: 12.45,
        queriesInProgress: 3,
        estimatedDailyCost: 58.20
      },
      forecast: {
        nextWeekEstimate: 420.50,
        nextMonthEstimate: 1850.00,
        confidence: 0.85
      },
      recommendations: [
        {
          type: 'optimization',
          title: 'Optimize Frequent Queries',
          description: 'Add indexes to reduce execution time for top 10 most frequent queries',
          impact: 'high',
          effort: 'medium',
          estimatedSavings: 125.30
        },
        {
          type: 'caching',
          title: 'Implement Query Caching',
          description: 'Cache results for queries that are repeated within 1 hour',
          impact: 'medium',
          effort: 'low',
          estimatedSavings: 89.20
        }
      ]
    })
  }

  static async getCostAlerts() {
    return this.simulateApiCall({
      alerts: [
        {
          id: '1',
          type: 'budget_exceeded',
          severity: 'critical',
          message: 'Monthly budget exceeded by 15%',
          timestamp: new Date(Date.now() - 3600000).toISOString(),
          acknowledged: false
        },
        {
          id: '2',
          type: 'unusual_spike',
          severity: 'warning',
          message: 'Query costs increased by 40% in the last hour',
          timestamp: new Date(Date.now() - 1800000).toISOString(),
          acknowledged: false
        }
      ],
      criticalCount: 1,
      highCount: 0,
      mediumCount: 1,
      lowCount: 0
    })
  }

  // Schema Mock Methods
  static async getAllSchemaTables() {
    return this.simulateApiCall([
      {
        schemaName: 'Sales',
        tableName: 'Customers',
        businessPurpose: 'Customer information and contact details',
        domainClassification: 'Customer Management',
        estimatedRowCount: 15420,
        lastUpdated: '2024-06-20T09:15:00Z'
      },
      {
        schemaName: 'Sales',
        tableName: 'Orders',
        businessPurpose: 'Customer orders and transactions',
        domainClassification: 'Order Management',
        estimatedRowCount: 89234,
        lastUpdated: '2024-06-20T10:30:00Z'
      },
      {
        schemaName: 'Inventory',
        tableName: 'Products',
        businessPurpose: 'Product catalog and specifications',
        domainClassification: 'Product Management',
        estimatedRowCount: 5678,
        lastUpdated: '2024-06-19T16:45:00Z'
      },
      {
        schemaName: 'HR',
        tableName: 'Employees',
        businessPurpose: 'Employee information and records',
        domainClassification: 'Human Resources',
        estimatedRowCount: 234,
        lastUpdated: '2024-06-18T14:20:00Z'
      }
    ])
  }

  static async getSchemaSummary() {
    return this.simulateApiCall({
      databaseName: 'BIReportingCopilot_dev',
      tableCount: 47,
      lastUpdated: new Date().toISOString()
    })
  }
}
