using BIReportingCopilot.Core.Models;

namespace BIReportingCopilot.Infrastructure.AI.Management;

/// <summary>
/// Generates mock data for testing and development purposes
/// </summary>
public static class MockDataGenerator
{
    public static AutoGeneratedTableContext GenerateMockTableContext(TableMetadata table)
    {
        var tableName = table.Name.ToLowerInvariant();
        var schemaName = table.Schema;

        // Generate realistic business context based on table name patterns
        string businessPurpose, businessContext, primaryUseCase, businessRules;
        List<string> keyBusinessMetrics, commonQueryPatterns;

        if (tableName.Contains("player") || tableName.Contains("user") || tableName.Contains("customer"))
        {
            businessPurpose = "Manages player account information and gaming profiles";
            businessContext = "Central repository for player data including registration details, preferences, and account status";
            primaryUseCase = "Player registration, authentication, and account management";
            keyBusinessMetrics = new List<string> { "Total Active Players", "New Player Registrations", "Player Retention Rate" };
            commonQueryPatterns = new List<string> { "Find player by ID", "Get active players", "Player registration trends" };
            businessRules = "Players must have unique identifiers and valid contact information";
        }
        else if (tableName.Contains("transaction") || tableName.Contains("payment"))
        {
            businessPurpose = "Records all financial transactions and payment activities";
            businessContext = "Comprehensive transaction log for deposits, withdrawals, and gaming activities";
            primaryUseCase = "Financial transaction processing and audit trail maintenance";
            keyBusinessMetrics = new List<string> { "Total Transaction Volume", "Average Transaction Amount", "Transaction Success Rate" };
            commonQueryPatterns = new List<string> { "Transaction history by player", "Daily transaction summaries", "Failed transaction analysis" };
            businessRules = "All transactions must be properly authorized and logged with complete audit information";
        }
        else if (tableName.Contains("game") || tableName.Contains("bet") || tableName.Contains("wager"))
        {
            businessPurpose = "Tracks gaming activities, bets, and game outcomes";
            businessContext = "Core gaming data including bet placement, game results, and player gaming behavior";
            primaryUseCase = "Game result tracking and betting activity monitoring";
            keyBusinessMetrics = new List<string> { "Total Bets Placed", "Average Bet Amount", "Game Win Rate", "Player Gaming Frequency" };
            commonQueryPatterns = new List<string> { "Player betting history", "Game performance analysis", "Win/loss calculations" };
            businessRules = "All bets must be placed within game limits and properly validated before processing";
        }
        else if (tableName.Contains("bonus") || tableName.Contains("promotion"))
        {
            businessPurpose = "Manages promotional offers and bonus distributions";
            businessContext = "Marketing and player retention tool for managing various promotional campaigns";
            primaryUseCase = "Bonus allocation and promotional campaign management";
            keyBusinessMetrics = new List<string> { "Bonus Utilization Rate", "Promotional Campaign ROI", "Player Bonus Engagement" };
            commonQueryPatterns = new List<string> { "Active promotions", "Player bonus history", "Campaign effectiveness analysis" };
            businessRules = "Bonuses must comply with regulatory requirements and have clear terms and conditions";
        }
        else if (tableName.Contains("session") || tableName.Contains("login"))
        {
            businessPurpose = "Tracks player login sessions and platform usage";
            businessContext = "Session management for security, analytics, and user experience optimization";
            primaryUseCase = "User session tracking and platform usage analysis";
            keyBusinessMetrics = new List<string> { "Average Session Duration", "Daily Active Users", "Session Frequency" };
            commonQueryPatterns = new List<string> { "Active sessions", "Session duration analysis", "User activity patterns" };
            businessRules = "Sessions must be properly authenticated and have appropriate timeout mechanisms";
        }
        else if (tableName.Contains("currency") || tableName.Contains("exchange"))
        {
            businessPurpose = "Manages currency information and exchange rates";
            businessContext = "Multi-currency support for international gaming operations";
            primaryUseCase = "Currency conversion and multi-currency transaction processing";
            keyBusinessMetrics = new List<string> { "Supported Currencies", "Exchange Rate Accuracy", "Currency Transaction Volume" };
            commonQueryPatterns = new List<string> { "Current exchange rates", "Currency conversion history", "Multi-currency reporting" };
            businessRules = "Exchange rates must be updated regularly and comply with financial regulations";
        }
        else if (tableName.Contains("country") || tableName.Contains("region") || tableName.Contains("location"))
        {
            businessPurpose = "Stores geographic and regional information";
            businessContext = "Geographic data for compliance, localization, and regional business analysis";
            primaryUseCase = "Geographic compliance and regional business intelligence";
            keyBusinessMetrics = new List<string> { "Players by Region", "Regional Revenue", "Geographic Distribution" };
            commonQueryPatterns = new List<string> { "Players by country", "Regional performance analysis", "Compliance reporting by jurisdiction" };
            businessRules = "Geographic data must comply with local regulations and privacy requirements";
        }
        else
        {
            businessPurpose = $"Manages {tableName} data and related business operations";
            businessContext = $"Supporting table for {tableName} related business processes and data management";
            primaryUseCase = $"Data storage and retrieval for {tableName} business operations";
            keyBusinessMetrics = new List<string> { "Record Count", "Data Quality Score", "Update Frequency" };
            commonQueryPatterns = new List<string> { $"Query {tableName} records", $"Filter {tableName} data", $"Aggregate {tableName} statistics" };
            businessRules = "Standard data integrity constraints and business validation rules apply to this table";
        }

        return new AutoGeneratedTableContext
        {
            TableName = table.Name,
            SchemaName = table.Schema,
            BusinessPurpose = businessPurpose,
            BusinessContext = businessContext,
            PrimaryUseCase = primaryUseCase,
            KeyBusinessMetrics = keyBusinessMetrics,
            CommonQueryPatterns = commonQueryPatterns,
            BusinessRules = businessRules,
            GeneratedAt = DateTime.UtcNow,
            IsAutoGenerated = true,
            ConfidenceScore = 0.85 // Mock confidence score
        };
    }

    public static AutoGeneratedGlossaryTerm GenerateMockGlossaryTerm(string term)
    {
        var termLower = term.ToLowerInvariant();
        
        string definition, businessContext, category;
        List<string> tags;

        // Generate realistic definitions based on gaming/casino terminology
        if (termLower.Contains("player"))
        {
            definition = "A registered user who participates in gaming activities on the platform";
            businessContext = "Central to all gaming operations, representing the customer in the gaming ecosystem";
            category = "Customer";
            tags = new List<string> { "customer", "gaming", "account" };
        }
        else if (termLower.Contains("deposit"))
        {
            definition = "Money transferred by a player into their gaming account";
            businessContext = "Essential for funding player accounts and enabling gaming activities";
            category = "Financial";
            tags = new List<string> { "money", "transaction", "funding" };
        }
        else if (termLower.Contains("withdrawal"))
        {
            definition = "Money transferred from a player's gaming account to their external account";
            businessContext = "Critical for player satisfaction and regulatory compliance";
            category = "Financial";
            tags = new List<string> { "money", "transaction", "payout" };
        }
        else if (termLower.Contains("bet") || termLower.Contains("wager"))
        {
            definition = "An amount of money risked by a player on the outcome of a game";
            businessContext = "Core gaming activity that generates revenue and drives player engagement";
            category = "Gaming";
            tags = new List<string> { "gaming", "risk", "money" };
        }
        else if (termLower.Contains("bonus"))
        {
            definition = "Promotional credit given to players to encourage gaming activity";
            businessContext = "Marketing tool used for player acquisition and retention";
            category = "Marketing";
            tags = new List<string> { "promotion", "marketing", "incentive" };
        }
        else if (termLower.Contains("game"))
        {
            definition = "A gaming activity or entertainment option available on the platform";
            businessContext = "Core product offering that provides entertainment and revenue generation";
            category = "Gaming";
            tags = new List<string> { "entertainment", "product", "gaming" };
        }
        else if (termLower.Contains("session"))
        {
            definition = "A period of continuous activity by a player on the gaming platform";
            businessContext = "Important for tracking player engagement and platform usage patterns";
            category = "Analytics";
            tags = new List<string> { "activity", "tracking", "engagement" };
        }
        else if (termLower.Contains("transaction"))
        {
            definition = "A financial operation or exchange of value within the gaming platform";
            businessContext = "Fundamental to all monetary activities and financial reporting";
            category = "Financial";
            tags = new List<string> { "money", "operation", "financial" };
        }
        else if (termLower.Contains("currency"))
        {
            definition = "A system of money used for transactions on the gaming platform";
            businessContext = "Enables multi-currency support for international operations";
            category = "Financial";
            tags = new List<string> { "money", "international", "exchange" };
        }
        else if (termLower.Contains("country") || termLower.Contains("region"))
        {
            definition = "Geographic location or jurisdiction relevant to gaming operations";
            businessContext = "Critical for compliance, localization, and regional business analysis";
            category = "Geographic";
            tags = new List<string> { "location", "compliance", "regional" };
        }
        else
        {
            definition = $"A business term related to {term} in the gaming platform context";
            businessContext = $"Part of the gaming platform's data and business operations related to {term}";
            category = "General";
            tags = new List<string> { "general", "business", "data" };
        }

        return new AutoGeneratedGlossaryTerm
        {
            Term = term,
            Definition = definition,
            BusinessContext = businessContext,
            Category = category,
            Tags = tags,
            ConfidenceScore = 0.8, // Mock confidence score
            GeneratedAt = DateTime.UtcNow,
            IsAutoGenerated = true
        };
    }

    public static AutoGeneratedColumnContext GenerateMockColumnContext(ColumnMetadata column, string tableName)
    {
        var columnName = column.Name.ToLowerInvariant();
        
        string businessName = GenerateBusinessName(column.Name);
        string businessDescription = GenerateBusinessDescription(column, tableName);
        string businessDataType = InferBusinessDataType(column);
        List<string> sampleValues = GenerateSampleValues(column);
        List<string> businessRules = GenerateColumnBusinessRules(column);
        List<string> commonUseCases = GenerateColumnUseCases(column, tableName);

        return new AutoGeneratedColumnContext
        {
            ColumnName = column.Name,
            BusinessName = businessName,
            BusinessDescription = businessDescription,
            DataType = column.DataType,
            BusinessDataType = businessDataType,
            IsPrimaryKey = column.IsPrimaryKey,
            IsForeignKey = column.IsForeignKey,
            IsNullable = column.IsNullable,
            SampleValues = sampleValues,
            BusinessRules = businessRules,
            CommonUseCases = commonUseCases,
            ConfidenceScore = 0.8,
            GeneratedAt = DateTime.UtcNow,
            IsAutoGenerated = true
        };
    }

    private static string GenerateBusinessName(string columnName)
    {
        return columnName
            .Replace("_", " ")
            .Replace("Id", "ID")
            .Replace("Cd", "Code")
            .Replace("Dt", "Date")
            .Replace("Amt", "Amount")
            .Replace("Qty", "Quantity")
            .Replace("Desc", "Description")
            .Replace("Num", "Number");
    }

    private static string GenerateBusinessDescription(ColumnMetadata column, string tableName)
    {
        var columnName = column.Name.ToLowerInvariant();
        
        if (columnName.Contains("id") && column.IsPrimaryKey)
            return $"Unique identifier for records in the {tableName} table";
        if (columnName.Contains("player"))
            return "Player or customer identifier";
        if (columnName.Contains("amount"))
            return "Monetary value or amount";
        if (columnName.Contains("date"))
            return "Date and time information";
        if (columnName.Contains("status"))
            return "Current status or state";
        
        return $"Data field {column.Name} in the {tableName} table";
    }

    private static string InferBusinessDataType(ColumnMetadata column)
    {
        var dataType = column.DataType.ToLowerInvariant();
        
        if (dataType.Contains("varchar") || dataType.Contains("char") || dataType.Contains("text"))
            return "Text";
        if (dataType.Contains("int") || dataType.Contains("decimal") || dataType.Contains("float"))
            return "Number";
        if (dataType.Contains("date") || dataType.Contains("time"))
            return "Date";
        if (dataType.Contains("bit") || dataType.Contains("boolean"))
            return "Boolean";
        
        return "Text";
    }

    private static List<string> GenerateSampleValues(ColumnMetadata column)
    {
        var columnName = column.Name.ToLowerInvariant();
        
        if (columnName.Contains("player"))
            return new List<string> { "player123", "user456", "customer789" };
        if (columnName.Contains("amount"))
            return new List<string> { "100.00", "250.50", "1000.00" };
        if (columnName.Contains("status"))
            return new List<string> { "Active", "Inactive", "Pending" };
        
        return new List<string> { "Sample Value 1", "Sample Value 2", "Sample Value 3" };
    }

    private static List<string> GenerateColumnBusinessRules(ColumnMetadata column)
    {
        var rules = new List<string>();
        
        if (column.IsPrimaryKey)
            rules.Add("Must be unique across all records");
        if (!column.IsNullable)
            rules.Add("Required field - cannot be empty");
        if (column.IsForeignKey)
            rules.Add("Must reference a valid record in the related table");
        
        return rules.Any() ? rules : new List<string> { "Standard data validation rules apply" };
    }

    private static List<string> GenerateColumnUseCases(ColumnMetadata column, string tableName)
    {
        var useCases = new List<string>();
        
        if (column.IsPrimaryKey)
            useCases.Add($"Unique identification of {tableName} records");
        
        var columnName = column.Name.ToLowerInvariant();
        if (columnName.Contains("player"))
            useCases.Add("Player identification and account management");
        if (columnName.Contains("amount"))
            useCases.Add("Financial calculations and reporting");
        if (columnName.Contains("date"))
            useCases.Add("Time-based analysis and reporting");
        
        return useCases.Any() ? useCases : new List<string> { $"General data operations for {tableName}" };
    }
}
