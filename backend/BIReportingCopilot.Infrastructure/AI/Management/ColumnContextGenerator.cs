using BIReportingCopilot.Core.Interfaces;
using BIReportingCopilot.Core.Interfaces.AI;
using BIReportingCopilot.Core.Interfaces.Schema;
using BIReportingCopilot.Core.Models;
using Microsoft.Extensions.Logging;

namespace BIReportingCopilot.Infrastructure.AI.Management;

/// <summary>
/// Handles column context generation using AI services
/// </summary>
public class ColumnContextGenerator
{
    private readonly ISchemaService _schemaService;
    private readonly IAIService _aiService;
    private readonly ILogger<ColumnContextGenerator> _logger;
    private readonly AIServiceHelper _aiServiceHelper;

    // Gaming/Casino domain knowledge for better context generation
    private readonly Dictionary<string, string> _domainPatterns = new()
    {
        ["player"] = "Gaming customer or user account",
        ["deposit"] = "Money added to player account",
        ["withdrawal"] = "Money removed from player account",
        ["bet"] = "Wager placed by player",
        ["win"] = "Amount won by player",
        ["bonus"] = "Promotional credit given to player",
        ["game"] = "Casino game or slot machine",
        ["session"] = "Gaming session or login period",
        ["transaction"] = "Financial transaction",
        ["balance"] = "Account balance or available funds",
        ["currency"] = "Money denomination",
        ["country"] = "Geographic location",
        ["whitelabel"] = "Brand or operator",
        ["casino"] = "Casino gaming platform",
        ["sport"] = "Sports betting platform",
        ["live"] = "Live dealer games",
        ["bingo"] = "Bingo gaming platform"
    };

    public ColumnContextGenerator(
        ISchemaService schemaService,
        IAIService aiService,
        ILogger<ColumnContextGenerator> logger,
        AIServiceHelper aiServiceHelper)
    {
        _schemaService = schemaService;
        _aiService = aiService;
        _logger = logger;
        _aiServiceHelper = aiServiceHelper;
    }

    public async Task<List<AutoGeneratedColumnContext>> GenerateColumnContextsAsync(
        TableMetadata table, 
        Func<string, string, string?, Task>? progressCallback = null, 
        bool mockMode = false)
    {
        var results = new List<AutoGeneratedColumnContext>();
        var processedColumns = 0;

        foreach (var column in table.Columns)
        {
            if (progressCallback != null)
                await progressCallback("Column Analysis", $"Processing column {column.Name} ({processedColumns + 1}/{table.Columns.Count})", column.Name);

            // Add detailed progress in mock mode
            if (mockMode && progressCallback != null)
            {
                await progressCallback("Column Analysis", $"Analyzing column {column.Name} (mock mode)...", column.Name);
                await Task.Delay(50);
                await progressCallback("Column Analysis", $"Generating business context for {column.Name}...", column.Name);
                await Task.Delay(50);
            }

            var context = mockMode 
                ? GenerateMockColumnContext(column, table.Name)
                : await GenerateColumnContextAsync(column, table.Name);

            // Enhance with domain-specific patterns
            context.BusinessName = GenerateBusinessName(column.Name);
            context.BusinessDescription = GenerateBusinessDescription(column, table.Name);
            context.BusinessDataType = InferBusinessDataType(column);

            // Add business rules based on column patterns
            context.BusinessRules = GenerateColumnBusinessRules(column);
            context.CommonUseCases = GenerateColumnUseCases(column, table.Name);

            results.Add(context);
            processedColumns++;

            // Final progress update for this column
            if (progressCallback != null)
                await progressCallback("Column Analysis", $"Completed column {column.Name} ({processedColumns}/{table.Columns.Count})", column.Name);

            if (mockMode)
            {
                await Task.Delay(25); // Small delay to see progress
            }
        }

        return results;
    }

    private async Task<AutoGeneratedColumnContext> GenerateColumnContextAsync(ColumnMetadata column, string tableName)
    {
        try
        {
            var prompt = BuildColumnAnalysisPrompt(column, tableName);
            var aiResponse = await _aiServiceHelper.GenerateStructuredResponseAsync(prompt);
            
            return ParseColumnContextResponse(aiResponse, column);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error generating AI context for column {Column} in table {Table}", column.Name, tableName);
            return GenerateMockColumnContext(column, tableName);
        }
    }

    private AutoGeneratedColumnContext GenerateMockColumnContext(ColumnMetadata column, string tableName)
    {
        return new AutoGeneratedColumnContext
        {
            ColumnName = column.Name,
            BusinessName = GenerateBusinessName(column.Name),
            BusinessDescription = GenerateBusinessDescription(column, tableName),
            DataType = column.DataType,
            BusinessDataType = InferBusinessDataType(column),
            IsPrimaryKey = column.IsPrimaryKey,
            IsForeignKey = column.IsForeignKey,
            IsNullable = column.IsNullable,
            SampleValues = GenerateSampleValues(column),
            BusinessRules = GenerateColumnBusinessRules(column),
            CommonUseCases = GenerateColumnUseCases(column, tableName),
            ConfidenceScore = 0.8,
            GeneratedAt = DateTime.UtcNow,
            IsAutoGenerated = true
        };
    }

    private string BuildColumnAnalysisPrompt(ColumnMetadata column, string tableName)
    {
        var prompt = $@"
Analyze this database column and provide business context for a gaming/casino platform:

Table: {tableName}
Column: {column.Name}
Data Type: {column.DataType}
Is Primary Key: {column.IsPrimaryKey}
Is Foreign Key: {column.IsForeignKey}
Is Nullable: {column.IsNullable}

Based on the column name and characteristics, provide:
1. Business Name: A user-friendly name for this column
2. Business Description: What this column represents in business terms
3. Business Data Type: Simplified data type (Text, Number, Date, Boolean, etc.)
4. Sample Values: What kind of values would typically be stored here
5. Business Rules: What business rules or constraints apply to this column
6. Common Use Cases: How this column is typically used in business scenarios

Focus on gaming/casino business terminology.

Respond in JSON format:
{{
  ""businessName"": ""..."",
  ""businessDescription"": ""..."",
  ""businessDataType"": ""..."",
  ""sampleValues"": [""...""],
  ""businessRules"": [""...""],
  ""commonUseCases"": [""...""],
  ""confidenceScore"": 0.85
}}";

        return prompt;
    }

    private AutoGeneratedColumnContext ParseColumnContextResponse(string aiResponse, ColumnMetadata column)
    {
        try
        {
            var jsonResponse = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, object>>(aiResponse);
            if (jsonResponse == null)
            {
                return GenerateMockColumnContext(column, "Unknown");
            }

            return new AutoGeneratedColumnContext
            {
                ColumnName = column.Name,
                BusinessName = JsonHelper.GetStringValue(jsonResponse, "businessName") ?? GenerateBusinessName(column.Name),
                BusinessDescription = JsonHelper.GetStringValue(jsonResponse, "businessDescription") ?? $"Business description for {column.Name}",
                DataType = column.DataType,
                BusinessDataType = JsonHelper.GetStringValue(jsonResponse, "businessDataType") ?? InferBusinessDataType(column),
                IsPrimaryKey = column.IsPrimaryKey,
                IsForeignKey = column.IsForeignKey,
                IsNullable = column.IsNullable,
                SampleValues = JsonHelper.GetStringArrayValue(jsonResponse, "sampleValues"),
                BusinessRules = JsonHelper.GetStringArrayValue(jsonResponse, "businessRules"),
                CommonUseCases = JsonHelper.GetStringArrayValue(jsonResponse, "commonUseCases"),
                ConfidenceScore = JsonHelper.GetDoubleValue(jsonResponse, "confidenceScore", 0.7),
                GeneratedAt = DateTime.UtcNow,
                IsAutoGenerated = true
            };
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error parsing column context response for {Column}", column.Name);
            return GenerateMockColumnContext(column, "Unknown");
        }
    }

    private string GenerateBusinessName(string columnName)
    {
        // Convert technical column names to business-friendly names
        var businessName = columnName
            .Replace("_", " ")
            .Replace("Id", "ID")
            .Replace("Cd", "Code")
            .Replace("Dt", "Date")
            .Replace("Amt", "Amount")
            .Replace("Qty", "Quantity")
            .Replace("Desc", "Description")
            .Replace("Num", "Number");

        // Capitalize first letter of each word
        return System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(businessName.ToLower());
    }

    private string GenerateBusinessDescription(ColumnMetadata column, string tableName)
    {
        var columnName = column.Name.ToLowerInvariant();
        var tableNameLower = tableName.ToLowerInvariant();

        // Check domain patterns first
        foreach (var pattern in _domainPatterns)
        {
            if (columnName.Contains(pattern.Key))
            {
                return $"{pattern.Value} - {column.Name} in {tableName}";
            }
        }

        // Generate based on common patterns
        if (columnName.Contains("id") && column.IsPrimaryKey)
            return $"Unique identifier for records in the {tableName} table";
        if (columnName.Contains("id") && column.IsForeignKey)
            return $"Reference to another table's record from {tableName}";
        if (columnName.Contains("date") || columnName.Contains("time"))
            return $"Date/time information for {tableName} records";
        if (columnName.Contains("amount") || columnName.Contains("value"))
            return $"Monetary or numeric value associated with {tableName}";
        if (columnName.Contains("name") || columnName.Contains("title"))
            return $"Descriptive name or title for {tableName} records";
        if (columnName.Contains("status") || columnName.Contains("state"))
            return $"Current status or state of {tableName} records";
        if (columnName.Contains("count") || columnName.Contains("number"))
            return $"Numeric count or quantity for {tableName}";

        return $"Data field {column.Name} in the {tableName} table";
    }

    private string InferBusinessDataType(ColumnMetadata column)
    {
        var dataType = column.DataType.ToLowerInvariant();
        
        if (dataType.Contains("varchar") || dataType.Contains("char") || dataType.Contains("text"))
            return "Text";
        if (dataType.Contains("int") || dataType.Contains("decimal") || dataType.Contains("float") || dataType.Contains("money"))
            return "Number";
        if (dataType.Contains("date") || dataType.Contains("time"))
            return "Date";
        if (dataType.Contains("bit") || dataType.Contains("boolean"))
            return "Boolean";
        if (dataType.Contains("uniqueidentifier") || dataType.Contains("guid"))
            return "Identifier";

        return "Text"; // Default fallback
    }

    private List<string> GenerateSampleValues(ColumnMetadata column)
    {
        var columnName = column.Name.ToLowerInvariant();
        var dataType = column.DataType.ToLowerInvariant();

        if (columnName.Contains("player"))
            return new List<string> { "player123", "user456", "customer789" };
        if (columnName.Contains("amount") || columnName.Contains("balance"))
            return new List<string> { "100.00", "250.50", "1000.00" };
        if (columnName.Contains("currency"))
            return new List<string> { "USD", "EUR", "GBP" };
        if (columnName.Contains("country"))
            return new List<string> { "US", "UK", "CA" };
        if (columnName.Contains("status"))
            return new List<string> { "Active", "Inactive", "Pending" };
        if (columnName.Contains("date") || dataType.Contains("date"))
            return new List<string> { "2024-01-15", "2024-02-20", "2024-03-10" };
        if (dataType.Contains("bit") || dataType.Contains("boolean"))
            return new List<string> { "true", "false" };

        return new List<string> { "Sample Value 1", "Sample Value 2", "Sample Value 3" };
    }

    private List<string> GenerateColumnBusinessRules(ColumnMetadata column)
    {
        var rules = new List<string>();
        var columnName = column.Name.ToLowerInvariant();

        if (column.IsPrimaryKey)
            rules.Add("Must be unique across all records");
        if (!column.IsNullable)
            rules.Add("Required field - cannot be empty");
        if (column.IsForeignKey)
            rules.Add("Must reference a valid record in the related table");

        if (columnName.Contains("email"))
            rules.Add("Must be a valid email address format");
        if (columnName.Contains("amount") || columnName.Contains("balance"))
            rules.Add("Must be a positive monetary value");
        if (columnName.Contains("date"))
            rules.Add("Must be a valid date in the past or present");
        if (columnName.Contains("phone"))
            rules.Add("Must follow valid phone number format");

        return rules.Any() ? rules : new List<string> { "Standard data validation rules apply" };
    }

    private List<string> GenerateColumnUseCases(ColumnMetadata column, string tableName)
    {
        var useCases = new List<string>();
        var columnName = column.Name.ToLowerInvariant();
        var tableNameLower = tableName.ToLowerInvariant();

        if (column.IsPrimaryKey)
            useCases.Add($"Unique identification of {tableName} records");
        if (columnName.Contains("player"))
            useCases.Add("Player identification and account management");
        if (columnName.Contains("amount"))
            useCases.Add("Financial calculations and reporting");
        if (columnName.Contains("date"))
            useCases.Add("Time-based analysis and reporting");
        if (columnName.Contains("status"))
            useCases.Add("Workflow management and state tracking");

        if (tableNameLower.Contains("transaction"))
            useCases.Add("Transaction processing and audit trails");
        if (tableNameLower.Contains("player"))
            useCases.Add("Customer relationship management");
        if (tableNameLower.Contains("game"))
            useCases.Add("Gaming analytics and performance tracking");

        return useCases.Any() ? useCases : new List<string> { $"General data operations for {tableName}" };
    }
}
