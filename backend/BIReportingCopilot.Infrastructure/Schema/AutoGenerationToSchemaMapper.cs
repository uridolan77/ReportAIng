using BIReportingCopilot.Core.Models;
using BIReportingCopilot.Core.DTOs;

namespace BIReportingCopilot.Infrastructure.Schema;

/// <summary>
/// Maps auto-generation results to schema management DTOs
/// </summary>
public static class AutoGenerationToSchemaMapper
{
    /// <summary>
    /// Convert AutoGenerationResponse to ApplyToSchemaRequest
    /// </summary>
    public static ApplyToSchemaRequest MapToApplyRequest(AutoGenerationResponse autoGenerated, 
        string? schemaName = null, string? schemaDescription = null, 
        string? versionName = null, string? versionDescription = null,
        Guid? existingSchemaId = null)
    {
        var request = new ApplyToSchemaRequest
        {
            SchemaId = existingSchemaId,
            NewSchemaName = schemaName ?? "Auto-Generated Schema",
            NewSchemaDescription = schemaDescription ?? "Schema created from auto-generation process",
            VersionName = versionName ?? "v1.0",
            VersionDescription = versionDescription ?? "Initial version from auto-generation",
            CreateNewVersion = true,
            SetAsCurrent = true,
            ChangeLog = new List<ChangeLogEntry>
            {
                new ChangeLogEntry
                {
                    Timestamp = DateTime.UtcNow,
                    Type = "Created",
                    Category = "Auto-Generation",
                    Item = "Full Schema",
                    Description = $"Auto-generated schema with {autoGenerated.GeneratedTableContexts.Count} tables, " +
                                 $"{autoGenerated.GeneratedGlossaryTerms.Count} glossary terms, " +
                                 $"and {autoGenerated.RelationshipAnalysis?.Relationships.Count ?? 0} relationships"
                }
            },
            TableContexts = autoGenerated.GeneratedTableContexts.Select(MapTableContext).ToList(),
            GlossaryTerms = autoGenerated.GeneratedGlossaryTerms.Select(MapGlossaryTerm).ToList(),
            Relationships = autoGenerated.RelationshipAnalysis?.Relationships.Select(MapRelationship).ToList() ?? new List<SchemaRelationshipDto>()
        };

        return request;
    }

    /// <summary>
    /// Convert AutoGeneratedTableContext to SchemaTableContextDto
    /// </summary>
    public static SchemaTableContextDto MapTableContext(AutoGeneratedTableContext source)
    {
        return new SchemaTableContextDto
        {
            Id = Guid.NewGuid(),
            TableName = source.TableName,
            SchemaName = source.SchemaName,
            BusinessPurpose = source.BusinessPurpose,
            BusinessContext = source.BusinessContext,
            PrimaryUseCase = source.PrimaryUseCase,
            KeyBusinessMetrics = source.KeyBusinessMetrics ?? new List<string>(),
            CommonQueryPatterns = source.CommonQueryPatterns ?? new List<string>(),
            BusinessRules = string.IsNullOrEmpty(source.BusinessRules) ? 
                new List<string>() : new List<string> { source.BusinessRules },
            ConfidenceScore = (decimal?)source.ConfidenceScore,
            IsAutoGenerated = source.IsAutoGenerated,
            CreatedAt = source.GeneratedAt,
            UpdatedAt = source.GeneratedAt,
            FullTableName = $"{source.SchemaName}.{source.TableName}",
            ColumnContexts = source.Columns?.Select(MapColumnContext).ToList() ?? new List<SchemaColumnContextDto>()
        };
    }

    /// <summary>
    /// Convert AutoGeneratedColumnContext to SchemaColumnContextDto
    /// </summary>
    public static SchemaColumnContextDto MapColumnContext(AutoGeneratedColumnContext source)
    {
        return new SchemaColumnContextDto
        {
            Id = Guid.NewGuid(),
            ColumnName = source.ColumnName,
            BusinessName = source.BusinessName,
            BusinessDescription = source.BusinessDescription,
            BusinessDataType = source.BusinessDataType,
            DataExamples = source.SampleValues ?? new List<string>(),
            ValidationRules = string.IsNullOrEmpty(source.ValueRange) ? 
                new List<string>() : new List<string> { source.ValueRange },
            CommonUseCases = source.CommonUseCases ?? new List<string>(),
            IsKeyColumn = source.IsPrimaryKey || source.IsForeignKey,
            IsPrimaryKey = source.IsPrimaryKey,
            IsForeignKey = source.IsForeignKey,
            ConfidenceScore = (decimal?)source.ConfidenceScore,
            IsAutoGenerated = source.IsAutoGenerated,
            CreatedAt = DateTime.UtcNow,
            UpdatedAt = DateTime.UtcNow
        };
    }

    /// <summary>
    /// Convert AutoGeneratedGlossaryTerm to SchemaGlossaryTermDto
    /// </summary>
    public static SchemaGlossaryTermDto MapGlossaryTerm(AutoGeneratedGlossaryTerm source)
    {
        return new SchemaGlossaryTermDto
        {
            Id = Guid.NewGuid(),
            Term = source.Term,
            Definition = source.Definition,
            BusinessContext = source.BusinessContext,
            Category = source.Category,
            Synonyms = source.Synonyms ?? new List<string>(),
            RelatedTerms = source.RelatedTerms ?? new List<string>(),
            SourceTables = source.SourceTables ?? new List<string>(),
            SourceColumns = source.SourceColumns ?? new List<string>(),
            ConfidenceScore = (decimal?)source.ConfidenceScore,
            IsAutoGenerated = source.IsAutoGenerated,
            CreatedAt = source.GeneratedAt,
            UpdatedAt = source.GeneratedAt
        };
    }

    /// <summary>
    /// Convert TableRelationship to SchemaRelationshipDto
    /// </summary>
    public static SchemaRelationshipDto MapRelationship(TableRelationship source)
    {
        return new SchemaRelationshipDto
        {
            Id = Guid.NewGuid(),
            FromTable = $"{source.FromSchema}.{source.FromTable}",
            ToTable = $"{source.ToSchema}.{source.ToTable}",
            RelationshipType = source.RelationshipType,
            FromColumns = source.ColumnMappings?.Select(cm => cm.FromColumn).ToList() ?? new List<string>(),
            ToColumns = source.ColumnMappings?.Select(cm => cm.ToColumn).ToList() ?? new List<string>(),
            BusinessDescription = source.BusinessRelationship,
            ConfidenceScore = (decimal?)source.ConfidenceScore,
            IsAutoGenerated = true,
            CreatedAt = DateTime.UtcNow,
            UpdatedAt = DateTime.UtcNow
        };
    }

    /// <summary>
    /// Convert schema management DTOs back to auto-generation format for editing
    /// </summary>
    public static AutoGenerationResponse MapFromSchemaToAutoGeneration(DetailedSchemaVersionDto schema)
    {
        return new AutoGenerationResponse
        {
            GeneratedTableContexts = schema.TableContexts.Select(MapFromTableContext).ToList(),
            GeneratedGlossaryTerms = schema.GlossaryTerms.Select(MapFromGlossaryTerm).ToList(),
            RelationshipAnalysis = new BusinessRelationshipAnalysis
            {
                Relationships = schema.Relationships.Select(MapFromRelationship).ToList(),
                BusinessDomains = new List<BusinessDomain>(),
                DataFlows = new List<DataFlow>(),
                AnalyzedAt = DateTime.UtcNow,
                OverallConfidence = schema.Relationships.Any() ?
                    (double)(schema.Relationships.Average(r => r.ConfidenceScore ?? 0.7m)) : 0.7
            },
            TotalTablesProcessed = schema.TableContexts.Count,
            TotalColumnsProcessed = schema.TableContexts.Sum(t => t.ColumnContexts.Count),
            TotalTermsGenerated = schema.GlossaryTerms.Count,
            ProcessingTime = TimeSpan.Zero,
            Warnings = new List<string>(),
            Errors = new List<string>(),
            Success = true
        };
    }

    private static AutoGeneratedTableContext MapFromTableContext(SchemaTableContextDto source)
    {
        return new AutoGeneratedTableContext
        {
            TableName = source.TableName,
            SchemaName = source.SchemaName,
            BusinessPurpose = source.BusinessPurpose ?? string.Empty,
            BusinessContext = source.BusinessContext ?? string.Empty,
            PrimaryUseCase = source.PrimaryUseCase ?? string.Empty,
            KeyBusinessMetrics = source.KeyBusinessMetrics,
            CommonQueryPatterns = source.CommonQueryPatterns,
            BusinessRules = source.BusinessRules.Any() ? string.Join("; ", source.BusinessRules) : string.Empty,
            Columns = source.ColumnContexts.Select(MapFromColumnContext).ToList(),
            RelatedTables = new List<string>(),
            ConfidenceScore = (double)(source.ConfidenceScore ?? 0.7m),
            GeneratedAt = source.CreatedAt,
            IsAutoGenerated = source.IsAutoGenerated
        };
    }

    private static AutoGeneratedColumnContext MapFromColumnContext(SchemaColumnContextDto source)
    {
        return new AutoGeneratedColumnContext
        {
            ColumnName = source.ColumnName,
            BusinessName = source.BusinessName ?? string.Empty,
            BusinessDescription = source.BusinessDescription ?? string.Empty,
            DataType = string.Empty, // Not stored in schema management
            BusinessDataType = source.BusinessDataType ?? string.Empty,
            SampleValues = source.DataExamples,
            ValueRange = source.ValidationRules.Any() ? string.Join("; ", source.ValidationRules) : string.Empty,
            BusinessRules = new List<string>(),
            CommonUseCases = source.CommonUseCases,
            IsPrimaryKey = source.IsPrimaryKey,
            IsForeignKey = source.IsForeignKey,
            ConfidenceScore = (double)(source.ConfidenceScore ?? 0.7m),
            IsAutoGenerated = source.IsAutoGenerated
        };
    }

    private static AutoGeneratedGlossaryTerm MapFromGlossaryTerm(SchemaGlossaryTermDto source)
    {
        return new AutoGeneratedGlossaryTerm
        {
            Term = source.Term,
            Definition = source.Definition,
            BusinessContext = source.BusinessContext ?? string.Empty,
            Synonyms = source.Synonyms,
            RelatedTerms = source.RelatedTerms,
            Category = source.Category ?? string.Empty,
            SourceTables = source.SourceTables,
            SourceColumns = source.SourceColumns,
            DataType = string.Empty, // Not stored in schema management
            ExampleValues = new List<string>(),
            ConfidenceScore = (double)(source.ConfidenceScore ?? 0.7m),
            GeneratedAt = source.CreatedAt,
            IsAutoGenerated = source.IsAutoGenerated
        };
    }

    private static TableRelationship MapFromRelationship(SchemaRelationshipDto source)
    {
        var fromParts = source.FromTable.Split('.');
        var toParts = source.ToTable.Split('.');

        return new TableRelationship
        {
            FromTable = fromParts.Length > 1 ? fromParts[1] : fromParts[0],
            FromSchema = fromParts.Length > 1 ? fromParts[0] : "dbo",
            ToTable = toParts.Length > 1 ? toParts[1] : toParts[0],
            ToSchema = toParts.Length > 1 ? toParts[0] : "dbo",
            RelationshipType = source.RelationshipType,
            BusinessRelationship = source.BusinessDescription ?? string.Empty,
            ColumnMappings = source.FromColumns.Zip(source.ToColumns, (from, to) => new ColumnMapping
            {
                FromColumn = from,
                ToColumn = to,
                BusinessMeaning = string.Empty
            }).ToList(),
            ConfidenceScore = (double)(source.ConfidenceScore ?? 0.7m)
        };
    }
}
