using System.ComponentModel.DataAnnotations;

namespace BIReportingCopilot.Core.Models;

/// <summary>
/// Comprehensive report with AI-generated insights
/// </summary>
public class ComprehensiveReport
{
    public string ReportId { get; set; } = Guid.NewGuid().ToString();
    public string Title { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public string UserId { get; set; } = string.Empty;
    public DateTime GeneratedAt { get; set; } = DateTime.UtcNow;
    public ReportType Type { get; set; } = ReportType.Comprehensive;
    public List<ReportSection> Sections { get; set; } = new();
    public List<DataInsight> Insights { get; set; } = new();
    public List<ReportVisualization> Visualizations { get; set; } = new();
    public ReportMetadata Metadata { get; set; } = new();
    public Dictionary<string, object> CustomData { get; set; } = new();
}

/// <summary>
/// Text-based report with narrative content
/// </summary>
public class TextReport
{
    public string ReportId { get; set; } = Guid.NewGuid().ToString();
    public string Title { get; set; } = string.Empty;
    public string Content { get; set; } = string.Empty;
    public ReportStyle Style { get; set; } = ReportStyle.Executive;
    public DateTime GeneratedAt { get; set; } = DateTime.UtcNow;
    public string UserId { get; set; } = string.Empty;
    public List<string> KeyFindings { get; set; } = new();
    public List<string> Recommendations { get; set; } = new();
    public ReportMetadata Metadata { get; set; } = new();
}

/// <summary>
/// Visual report with charts and graphics
/// </summary>
public class VisualReport
{
    public string ReportId { get; set; } = Guid.NewGuid().ToString();
    public string Title { get; set; } = string.Empty;
    public List<ReportVisualization> Visualizations { get; set; } = new();
    public ReportConfiguration Configuration { get; set; } = new();
    public DateTime GeneratedAt { get; set; } = DateTime.UtcNow;
    public string UserId { get; set; } = string.Empty;
    public ReportMetadata Metadata { get; set; } = new();
}

/// <summary>
/// Data insight generated by AI analysis
/// </summary>
public class DataInsight
{
    public string InsightId { get; set; } = Guid.NewGuid().ToString();
    public string Title { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public InsightType Type { get; set; } = InsightType.Trend;
    public InsightSeverity Severity { get; set; } = InsightSeverity.Medium;
    public double Confidence { get; set; }
    public List<string> SupportingData { get; set; } = new();
    public List<string> Recommendations { get; set; } = new();
    public DateTime GeneratedAt { get; set; } = DateTime.UtcNow;
    public Dictionary<string, object> Metadata { get; set; } = new();
}

/// <summary>
/// Report request configuration
/// </summary>
public class ReportRequest
{
    public string Title { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public ReportType Type { get; set; } = ReportType.Comprehensive;
    public List<string> DataSources { get; set; } = new();
    public ReportConfiguration Configuration { get; set; } = new();
    public Dictionary<string, object> Parameters { get; set; } = new();
    public DateTime RequestedAt { get; set; } = DateTime.UtcNow;
}

/// <summary>
/// Report configuration settings
/// </summary>
public class ReportConfiguration
{
    public string Title { get; set; } = string.Empty; // Added missing property
    public ReportFormat Format { get; set; } = ReportFormat.PDF;
    public bool IncludeCharts { get; set; } = true;
    public bool IncludeData { get; set; } = true;
    public bool IncludeInsights { get; set; } = true;
    public string Theme { get; set; } = "default";
    public Dictionary<string, object> CustomSettings { get; set; } = new();
}

/// <summary>
/// Report export result
/// </summary>
public class ReportExport
{
    public string ExportId { get; set; } = Guid.NewGuid().ToString();
    public string ReportId { get; set; } = string.Empty;
    public ExportFormat Format { get; set; }
    public byte[] Data { get; set; } = Array.Empty<byte>();
    public string FileName { get; set; } = string.Empty;
    public string ContentType { get; set; } = string.Empty;
    public DateTime GeneratedAt { get; set; } = DateTime.UtcNow;
    public ExportMetadata Metadata { get; set; } = new();
}

/// <summary>
/// Report template for reusable report structures
/// </summary>
public class ReportTemplate
{
    public string TemplateId { get; set; } = Guid.NewGuid().ToString();
    public string Name { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public string Category { get; set; } = string.Empty;
    public ReportType Type { get; set; } = ReportType.Comprehensive;
    public List<ReportSection> Sections { get; set; } = new();
    public List<TemplateParameter> Parameters { get; set; } = new();
    public bool IsPublic { get; set; } = true;
    public string CreatedBy { get; set; } = string.Empty;
    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
    public int UsageCount { get; set; } = 0;
}

/// <summary>
/// Scheduled report configuration
/// </summary>
public class ScheduledReportConfiguration
{
    public string ScheduleId { get; set; } = Guid.NewGuid().ToString();
    public string Name { get; set; } = string.Empty;
    public ReportRequest ReportRequest { get; set; } = new();
    public string CronExpression { get; set; } = string.Empty;
    public List<string> Recipients { get; set; } = new();
    public bool IsActive { get; set; } = true;
    public DateTime NextRun { get; set; }
    public DateTime? LastRun { get; set; }
    public string CreatedBy { get; set; } = string.Empty;
    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
}

/// <summary>
/// Reporting metrics and statistics
/// </summary>
public class ReportingMetrics
{
    public int TotalReports { get; set; }
    public int ReportsThisMonth { get; set; }
    public double AverageGenerationTime { get; set; }
    public Dictionary<ReportType, int> ReportsByType { get; set; } = new();
    public Dictionary<string, int> PopularTemplates { get; set; } = new();
    public List<ReportUsagePattern> UsagePatterns { get; set; } = new();
    public DateTime GeneratedAt { get; set; } = DateTime.UtcNow;
}

/// <summary>
/// Insight configuration for AI analysis
/// </summary>
public class InsightConfiguration
{
    public List<InsightType> EnabledTypes { get; set; } = new();
    public double MinConfidence { get; set; } = 0.7;
    public int MaxInsights { get; set; } = 10;
    public bool IncludeRecommendations { get; set; } = true;
    public Dictionary<string, object> CustomSettings { get; set; } = new();
}

/// <summary>
/// Trend analysis report
/// </summary>
public class TrendAnalysisReport
{
    public string ReportId { get; set; } = Guid.NewGuid().ToString();
    public string Title { get; set; } = string.Empty;
    public TimeSpan AnalysisPeriod { get; set; }
    public List<TrendPattern> Trends { get; set; } = new();
    public List<TrendPrediction> Predictions { get; set; } = new();
    public TrendAnalysisConfiguration Configuration { get; set; } = new();
    public DateTime GeneratedAt { get; set; } = DateTime.UtcNow;
}

/// <summary>
/// Comparative analysis report
/// </summary>
public class ComparativeAnalysisReport
{
    public string ReportId { get; set; } = Guid.NewGuid().ToString();
    public string Title { get; set; } = string.Empty;
    public List<ComparisonResult> Comparisons { get; set; } = new();
    public List<ComparisonInsight> Insights { get; set; } = new();
    public ComparativeAnalysisConfiguration Configuration { get; set; } = new();
    public DateTime GeneratedAt { get; set; } = DateTime.UtcNow;
}

/// <summary>
/// Generated report metadata
/// </summary>
public class GeneratedReport
{
    public string ReportId { get; set; } = Guid.NewGuid().ToString();
    public string Title { get; set; } = string.Empty;
    public ReportType Type { get; set; }
    public byte[] Data { get; set; } = Array.Empty<byte>();
    public string ContentType { get; set; } = string.Empty;
    public DateTime GeneratedAt { get; set; } = DateTime.UtcNow;
    public string GeneratedBy { get; set; } = string.Empty;
    public ReportMetadata Metadata { get; set; } = new();
}

// Supporting classes
public class ReportSection
{
    public string SectionId { get; set; } = Guid.NewGuid().ToString();
    public string Title { get; set; } = string.Empty;
    public string Content { get; set; } = string.Empty;
    public int Order { get; set; }
    public SectionType Type { get; set; } = SectionType.Text;
    public Dictionary<string, object> Data { get; set; } = new();
}

public class ReportVisualization
{
    public string VisualizationId { get; set; } = Guid.NewGuid().ToString();
    public string Title { get; set; } = string.Empty;
    public VisualizationType Type { get; set; } = VisualizationType.Table;
    public Dictionary<string, object> Data { get; set; } = new();
    public Dictionary<string, object> Configuration { get; set; } = new();
}

public class ReportMetadata
{
    public int PageCount { get; set; }
    public long FileSizeBytes { get; set; }
    public TimeSpan GenerationTime { get; set; }
    public string GeneratedBy { get; set; } = string.Empty;
    public Dictionary<string, object> CustomMetadata { get; set; } = new();

    // Additional properties expected by Infrastructure layer
    public string? DashboardId { get; set; }
    public int WidgetCount { get; set; }
    public string? GenerationMethod { get; set; }
    public Dictionary<string, object> CustomData { get; set; } = new();
}

public class ReportUsagePattern
{
    public string PatternType { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public double Frequency { get; set; }
    public TimeSpan Duration { get; set; }
}

public class TrendPattern
{
    public string PatternId { get; set; } = Guid.NewGuid().ToString();
    public string Name { get; set; } = string.Empty;
    public TrendDirection Direction { get; set; }
    public double Strength { get; set; }
    public double Confidence { get; set; }
    public DateTime StartDate { get; set; }
    public DateTime EndDate { get; set; }
}

public class TrendPrediction
{
    public string PredictionId { get; set; } = Guid.NewGuid().ToString();
    public string Metric { get; set; } = string.Empty;
    public double PredictedValue { get; set; }
    public double Confidence { get; set; }
    public DateTime PredictionDate { get; set; }
    public TimeSpan Horizon { get; set; }
}

public class TrendAnalysisConfiguration
{
    public TimeSpan AnalysisPeriod { get; set; } = TimeSpan.FromDays(30);
    public List<string> Metrics { get; set; } = new();
    public double MinConfidence { get; set; } = 0.7;
    public bool IncludePredictions { get; set; } = true;
}

public class ComparativeAnalysisConfiguration
{
    public List<string> ComparisonDimensions { get; set; } = new();
    public ComparisonType Type { get; set; } = ComparisonType.Temporal;
    public double SignificanceThreshold { get; set; } = 0.05;
    public bool IncludeStatisticalTests { get; set; } = true;
}

public class ComparisonResult
{
    public string ComparisonId { get; set; } = Guid.NewGuid().ToString();
    public string Dimension { get; set; } = string.Empty;
    public double Value1 { get; set; }
    public double Value2 { get; set; }
    public double Difference { get; set; }
    public double PercentageChange { get; set; }
    public bool IsSignificant { get; set; }
}

public class ComparisonInsight
{
    public string InsightId { get; set; } = Guid.NewGuid().ToString();
    public string Description { get; set; } = string.Empty;
    public InsightType Type { get; set; }
    public double Confidence { get; set; }
    public List<string> SupportingData { get; set; } = new();
}

// Enumerations
public enum ReportType
{
    Comprehensive,
    Summary,
    Detailed,
    Executive,
    Technical,
    Dashboard // Added missing value
}

public enum ReportFormat
{
    PDF,
    Excel,
    Word,
    PowerPoint,
    HTML,
    JSON,
    CSV
}

public enum ReportStyle
{
    Executive,
    Technical,
    Narrative,
    Analytical,
    Presentation
}

public enum InsightType
{
    Trend,
    Anomaly,
    Pattern,
    Correlation,
    Prediction,
    Recommendation
}

public enum InsightSeverity
{
    Low,
    Medium,
    High,
    Critical
}

public enum SectionType
{
    Text,
    Chart,
    Table,
    Image,
    Summary
}

// VisualizationType moved to AIModels.cs to avoid duplicates

public enum ComparisonType
{
    Temporal,
    Categorical,
    Dimensional,
    Statistical
}
