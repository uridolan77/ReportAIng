using System.ComponentModel.DataAnnotations;

namespace BIReportingCopilot.Core.Models;

/// <summary>
/// Represents a business schema definition with versioning support
/// </summary>
public class BusinessSchema
{
    public Guid Id { get; set; }

    [Required]
    [StringLength(100)]
    public string Name { get; set; } = string.Empty;

    [StringLength(500)]
    public string? Description { get; set; }

    [Required]
    [StringLength(100)]
    public string CreatedBy { get; set; } = string.Empty;

    public DateTime CreatedAt { get; set; }

    [Required]
    [StringLength(100)]
    public string UpdatedBy { get; set; } = string.Empty;

    public DateTime UpdatedAt { get; set; }

    public bool IsActive { get; set; } = true;

    public bool IsDefault { get; set; } = false;

    [StringLength(500)]
    public string? Tags { get; set; } // JSON array

    // Navigation properties
    public virtual ICollection<BusinessSchemaVersion> Versions { get; set; } = new List<BusinessSchemaVersion>();

    // Helper properties
    public BusinessSchemaVersion? CurrentVersion => Versions.FirstOrDefault(v => v.IsCurrent);
    public int TotalVersions => Versions.Count;
    public DateTime LastModified => Versions.OrderByDescending(v => v.CreatedAt).FirstOrDefault()?.CreatedAt ?? UpdatedAt;
}

/// <summary>
/// Represents a specific version of a business schema
/// </summary>
public class BusinessSchemaVersion
{
    public Guid Id { get; set; }

    public Guid SchemaId { get; set; }

    public int VersionNumber { get; set; }

    [StringLength(50)]
    public string? VersionName { get; set; }

    [StringLength(1000)]
    public string? Description { get; set; }

    [Required]
    [StringLength(100)]
    public string CreatedBy { get; set; } = string.Empty;

    public DateTime CreatedAt { get; set; }

    public bool IsActive { get; set; } = true;

    public bool IsCurrent { get; set; } = false;

    public string? ChangeLog { get; set; } // JSON

    // Navigation properties
    public virtual BusinessSchema Schema { get; set; } = null!;
    public virtual ICollection<SchemaTableContext> TableContexts { get; set; } = new List<SchemaTableContext>();
    public virtual ICollection<SchemaGlossaryTerm> GlossaryTerms { get; set; } = new List<SchemaGlossaryTerm>();
    public virtual ICollection<SchemaRelationship> Relationships { get; set; } = new List<SchemaRelationship>();
    public virtual ICollection<UserSchemaPreference> UserPreferences { get; set; } = new List<UserSchemaPreference>();

    // Helper properties
    public string DisplayName => !string.IsNullOrEmpty(VersionName) ? $"{VersionName} (v{VersionNumber})" : $"v{VersionNumber}";
    public int TotalTables => TableContexts.Count;
    public int TotalColumns => TableContexts.Sum(t => t.ColumnContexts.Count);
    public int TotalGlossaryTerms => GlossaryTerms.Count;
    public int TotalRelationships => Relationships.Count;
}

/// <summary>
/// Represents business context for a table within a schema version
/// </summary>
public class SchemaTableContext
{
    public Guid Id { get; set; }

    public Guid SchemaVersionId { get; set; }

    [Required]
    [StringLength(128)]
    public string TableName { get; set; } = string.Empty;

    [StringLength(128)]
    public string SchemaName { get; set; } = "dbo";

    [StringLength(500)]
    public string? BusinessPurpose { get; set; }

    public string? BusinessContext { get; set; }

    [StringLength(500)]
    public string? PrimaryUseCase { get; set; }

    public string? KeyBusinessMetrics { get; set; } // JSON array

    public string? CommonQueryPatterns { get; set; } // JSON array

    public string? BusinessRules { get; set; } // JSON array

    public decimal? ConfidenceScore { get; set; }

    public bool IsAutoGenerated { get; set; } = false;

    public DateTime CreatedAt { get; set; }

    public DateTime UpdatedAt { get; set; }

    public bool IsActive { get; set; } = true;

    // Navigation properties
    public virtual BusinessSchemaVersion SchemaVersion { get; set; } = null!;
    public virtual ICollection<SchemaColumnContext> ColumnContexts { get; set; } = new List<SchemaColumnContext>();

    // Helper properties
    public string FullTableName => !string.IsNullOrEmpty(SchemaName) ? $"{SchemaName}.{TableName}" : TableName;
}

/// <summary>
/// Represents business context for a column within a table context
/// </summary>
public class SchemaColumnContext
{
    public Guid Id { get; set; }

    public Guid TableContextId { get; set; }

    [Required]
    [StringLength(128)]
    public string ColumnName { get; set; } = string.Empty;

    [StringLength(200)]
    public string? BusinessName { get; set; }

    [StringLength(1000)]
    public string? BusinessDescription { get; set; }

    [StringLength(50)]
    public string? BusinessDataType { get; set; }

    public string? DataExamples { get; set; } // JSON array

    public string? ValidationRules { get; set; } // JSON array

    public string? CommonUseCases { get; set; } // JSON array

    public bool IsKeyColumn { get; set; } = false;

    public bool IsPrimaryKey { get; set; } = false;

    public bool IsForeignKey { get; set; } = false;

    public decimal? ConfidenceScore { get; set; }

    public bool IsAutoGenerated { get; set; } = false;

    public DateTime CreatedAt { get; set; }

    public DateTime UpdatedAt { get; set; }

    public bool IsActive { get; set; } = true;

    // Navigation properties
    public virtual SchemaTableContext TableContext { get; set; } = null!;
}

/// <summary>
/// Represents a business glossary term within a schema version
/// </summary>
public class SchemaGlossaryTerm
{
    public Guid Id { get; set; }

    public Guid SchemaVersionId { get; set; }

    [Required]
    [StringLength(200)]
    public string Term { get; set; } = string.Empty;

    [Required]
    public string Definition { get; set; } = string.Empty;

    [StringLength(1000)]
    public string? BusinessContext { get; set; }

    [StringLength(100)]
    public string? Category { get; set; }

    public string? Synonyms { get; set; } // JSON array

    public string? RelatedTerms { get; set; } // JSON array

    public string? SourceTables { get; set; } // JSON array

    public string? SourceColumns { get; set; } // JSON array

    public decimal? ConfidenceScore { get; set; }

    public bool IsAutoGenerated { get; set; } = false;

    public DateTime CreatedAt { get; set; }

    public DateTime UpdatedAt { get; set; }

    public bool IsActive { get; set; } = true;

    // Navigation properties
    public virtual BusinessSchemaVersion SchemaVersion { get; set; } = null!;
}

/// <summary>
/// Represents a relationship between tables within a schema version
/// </summary>
public class SchemaRelationship
{
    public Guid Id { get; set; }

    public Guid SchemaVersionId { get; set; }

    [Required]
    [StringLength(256)]
    public string FromTable { get; set; } = string.Empty;

    [Required]
    [StringLength(256)]
    public string ToTable { get; set; } = string.Empty;

    [Required]
    [StringLength(50)]
    public string RelationshipType { get; set; } = string.Empty;

    public string? FromColumns { get; set; } // JSON array

    public string? ToColumns { get; set; } // JSON array

    [StringLength(1000)]
    public string? BusinessDescription { get; set; }

    public decimal? ConfidenceScore { get; set; }

    public bool IsAutoGenerated { get; set; } = false;

    public DateTime CreatedAt { get; set; }

    public DateTime UpdatedAt { get; set; }

    public bool IsActive { get; set; } = true;

    public Guid SourceTableId { get; set; }

    public Guid TargetTableId { get; set; }

    // Navigation properties
    public virtual BusinessSchemaVersion SchemaVersion { get; set; } = null!;
}

/// <summary>
/// Represents user preferences for schema selection
/// </summary>
public class UserSchemaPreference
{
    public Guid Id { get; set; }

    [Required]
    [StringLength(100)]
    public string UserId { get; set; } = string.Empty;

    public Guid SchemaVersionId { get; set; }

    public Guid SchemaId { get; set; }

    public bool IsDefault { get; set; } = false;

    public bool IsActive { get; set; } = true;

    public DateTime LastUsed { get; set; } = DateTime.UtcNow;

    public DateTime CreatedAt { get; set; }

    public DateTime UpdatedAt { get; set; }

    // Navigation properties
    public virtual BusinessSchemaVersion SchemaVersion { get; set; } = null!;
}
