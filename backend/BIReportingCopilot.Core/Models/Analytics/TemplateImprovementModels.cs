namespace BIReportingCopilot.Core.Models.Analytics;

/// <summary>
/// Enums for template improvement
/// </summary>
public enum OptimizationStrategy
{
    PerformanceFocused,
    AccuracyFocused,
    UserSatisfactionFocused,
    ResponseTimeFocused,
    Balanced
}

public enum SuggestionReviewAction
{
    Approve,
    Reject,
    RequestChanges,
    ScheduleABTest
}

public enum ImprovementType
{
    ContentOptimization,
    StructureImprovement,
    ContextEnhancement,
    ExampleAddition,
    InstructionClarification,
    PerformanceOptimization
}

public enum VariantType
{
    ContentVariation,
    StructureVariation,
    StyleVariation,
    ComplexityVariation
}

/// <summary>
/// Template improvement suggestion generated by ML analysis
/// </summary>
public class TemplateImprovementSuggestion
{
    public long Id { get; set; }
    public string TemplateKey { get; set; } = string.Empty;
    public string TemplateName { get; set; } = string.Empty;
    public ImprovementType Type { get; set; }
    public string CurrentVersion { get; set; } = string.Empty;
    public string SuggestedChanges { get; set; } = string.Empty; // JSON object
    public string ReasoningExplanation { get; set; } = string.Empty;
    public decimal ExpectedImprovementPercent { get; set; }
    public int BasedOnDataPoints { get; set; }
    public decimal ConfidenceScore { get; set; }
    public SuggestionStatus Status { get; set; }
    public string? ReviewedBy { get; set; }
    public DateTime? ReviewedDate { get; set; }
    public string? ReviewComments { get; set; }
    public DateTime CreatedDate { get; set; }
    public List<string> SupportingEvidence { get; set; } = new();
    public Dictionary<string, object> Metadata { get; set; } = new();
}

/// <summary>
/// Optimized template result
/// </summary>
public class OptimizedTemplate
{
    public string OriginalTemplateKey { get; set; } = string.Empty;
    public string OptimizedContent { get; set; } = string.Empty;
    public OptimizationStrategy StrategyUsed { get; set; }
    public List<OptimizationChange> ChangesApplied { get; set; } = new();
    public decimal ExpectedPerformanceImprovement { get; set; }
    public decimal ConfidenceScore { get; set; }
    public string OptimizationReasoning { get; set; } = string.Empty;
    public Dictionary<string, decimal> MetricPredictions { get; set; } = new();
    public DateTime OptimizedDate { get; set; }
    public string OptimizedBy { get; set; } = "ML_System";
}

/// <summary>
/// A/B test request for template variants
/// </summary>
public class ABTestRequest
{
    public string TestName { get; set; } = string.Empty;
    public string OriginalTemplateKey { get; set; } = string.Empty;
    public string VariantTemplateContent { get; set; } = string.Empty;
    public int TrafficSplitPercent { get; set; } = 50;
    public DateTime StartDate { get; set; }
    public DateTime? EndDate { get; set; }
    public int MinimumSampleSize { get; set; } = 100;
    public decimal SignificanceLevel { get; set; } = 0.05m;
    public List<string> MetricsToTrack { get; set; } = new();
    public string CreatedBy { get; set; } = string.Empty;
    public Dictionary<string, object> TestParameters { get; set; } = new();
}

/// <summary>
/// A/B test result
/// </summary>
public class ABTestResult
{
    public long TestId { get; set; }
    public string TestName { get; set; } = string.Empty;
    public ABTestStatus Status { get; set; }
    public string Message { get; set; } = string.Empty;
    public DateTime CreatedDate { get; set; }
    public string VariantTemplateKey { get; set; } = string.Empty;
}

/// <summary>
/// A/B test analysis and results
/// </summary>
public class ABTestAnalysis
{
    public long TestId { get; set; }
    public string TestName { get; set; } = string.Empty;
    public ABTestStatus Status { get; set; }
    public DateTime StartDate { get; set; }
    public DateTime? EndDate { get; set; }
    public int OriginalSampleSize { get; set; }
    public int VariantSampleSize { get; set; }
    public decimal OriginalSuccessRate { get; set; }
    public decimal VariantSuccessRate { get; set; }
    public decimal StatisticalSignificance { get; set; }
    public decimal ConfidenceInterval { get; set; }
    public string WinnerTemplateKey { get; set; } = string.Empty;
    public decimal ImprovementPercent { get; set; }
    public decimal EffectSize { get; set; }
    public decimal ConfidenceIntervalLower { get; set; }
    public decimal ConfidenceIntervalUpper { get; set; }
    public Dictionary<string, MetricComparison> MetricComparisons { get; set; } = new();
    public List<string> Insights { get; set; } = new();
    public TestRecommendation Recommendation { get; set; }
    public DateTime AnalysisDate { get; set; }
}

/// <summary>
/// Automated test processing result
/// </summary>
public class AutomatedTestResult
{
    public long TestId { get; set; }
    public string TestName { get; set; } = string.Empty;
    public AutomatedTestAction Action { get; set; }
    public string Reason { get; set; } = string.Empty;
    public string ImplementedTemplateKey { get; set; } = string.Empty;
    public DateTime ProcessedDate { get; set; }
}

/// <summary>
/// Actions that can be taken during automated test processing
/// </summary>
public enum AutomatedTestAction
{
    NoAction,
    ImplementedVariant,
    KeptOriginal,
    ExpiredTest,
    PausedTest,
    Error
}

/// <summary>
/// Implementation result for winning variants
/// </summary>
public class ImplementationResult
{
    public long TestId { get; set; }
    public bool Success { get; set; }
    public string Message { get; set; } = string.Empty;
    public string ImplementedTemplateKey { get; set; } = string.Empty;
    public string PreviousTemplateKey { get; set; } = string.Empty;
    public DateTime ImplementationDate { get; set; }
    public string ImplementedBy { get; set; } = string.Empty;
    public List<string> ChangesApplied { get; set; } = new();
}

/// <summary>
/// User feedback analysis for templates
/// </summary>
public class FeedbackAnalysis
{
    public string TemplateKey { get; set; } = string.Empty;
    public TimeSpan AnalysisWindow { get; set; }
    public int TotalFeedbackCount { get; set; }
    public decimal AverageRating { get; set; }
    public Dictionary<int, int> RatingDistribution { get; set; } = new();
    public List<FeedbackTheme> CommonThemes { get; set; } = new();
    public List<FeedbackTheme> IssueCategories { get; set; } = new();
    public List<string> PositiveFeedbackPatterns { get; set; } = new();
    public List<string> NegativeFeedbackPatterns { get; set; } = new();
    public List<ImprovementSuggestionFromFeedback> UserSuggestions { get; set; } = new();
    public decimal SentimentScore { get; set; }
    public DateTime AnalysisDate { get; set; }
}

/// <summary>
/// Template variant generated by ML
/// </summary>
public class TemplateVariant
{
    public string VariantId { get; set; } = string.Empty;
    public string OriginalTemplateKey { get; set; } = string.Empty;
    public VariantType Type { get; set; }
    public string VariantContent { get; set; } = string.Empty;
    public string VariantDescription { get; set; } = string.Empty;
    public List<string> ChangesFromOriginal { get; set; } = new();
    public decimal PredictedPerformanceScore { get; set; }
    public decimal ConfidenceScore { get; set; }
    public string GenerationReasoning { get; set; } = string.Empty;
    public Dictionary<string, object> VariantMetadata { get; set; } = new();
    public DateTime GeneratedDate { get; set; }
}

/// <summary>
/// Performance prediction for new templates
/// </summary>
public class PerformancePrediction
{
    public string TemplateContent { get; set; } = string.Empty;
    public string IntentType { get; set; } = string.Empty;
    public decimal PredictedSuccessRate { get; set; }
    public decimal PredictedUserRating { get; set; }
    public int PredictedResponseTime { get; set; }
    public decimal PredictionConfidence { get; set; }
    public List<string> StrengthFactors { get; set; } = new();
    public List<string> WeaknessFactors { get; set; } = new();
    public List<string> ImprovementSuggestions { get; set; } = new();
    public Dictionary<string, decimal> FeatureScores { get; set; } = new();
    public DateTime PredictionDate { get; set; }
}

/// <summary>
/// Improvement recommendation based on successful patterns
/// </summary>
public class ImprovementRecommendation
{
    public string RecommendationId { get; set; } = string.Empty;
    public string TemplateKey { get; set; } = string.Empty;
    public ImprovementType Type { get; set; }
    public string Title { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public string SpecificSuggestion { get; set; } = string.Empty;
    public decimal ExpectedImpact { get; set; }
    public decimal ImplementationEffort { get; set; }
    public decimal Priority { get; set; }
    public List<string> BasedOnPatterns { get; set; } = new();
    public List<string> SimilarSuccessfulTemplates { get; set; } = new();
    public Dictionary<string, object> SupportingData { get; set; } = new();
    public DateTime GeneratedDate { get; set; }
}

/// <summary>
/// Content quality analysis for templates
/// </summary>
public class ContentQualityAnalysis
{
    public string TemplateContent { get; set; } = string.Empty;
    public decimal OverallQualityScore { get; set; }
    public Dictionary<string, decimal> QualityDimensions { get; set; } = new();
    public List<QualityIssue> IdentifiedIssues { get; set; } = new();
    public List<QualityStrength> Strengths { get; set; } = new();
    public List<string> ImprovementSuggestions { get; set; } = new();
    public ReadabilityMetrics Readability { get; set; } = new();
    public StructureAnalysis Structure { get; set; } = new();
    public ContentCompleteness Completeness { get; set; } = new();
    public DateTime AnalysisDate { get; set; }
}

/// <summary>
/// Template optimization history
/// </summary>
public class OptimizationHistory
{
    public string TemplateKey { get; set; } = string.Empty;
    public List<OptimizationEvent> OptimizationEvents { get; set; } = new();
    public List<PerformanceSnapshot> PerformanceSnapshots { get; set; } = new();
    public Dictionary<string, decimal> PerformanceTrends { get; set; } = new();
    public int TotalOptimizations { get; set; }
    public decimal CumulativeImprovement { get; set; }
    public DateTime FirstOptimization { get; set; }
    public DateTime LastOptimization { get; set; }
}

/// <summary>
/// Model training result
/// </summary>
public class ModelTrainingResult
{
    public string ModelVersion { get; set; } = string.Empty;
    public DateTime TrainingStartDate { get; set; }
    public DateTime TrainingEndDate { get; set; }
    public int TrainingDataPoints { get; set; }
    public decimal ModelAccuracy { get; set; }
    public decimal ValidationScore { get; set; }
    public Dictionary<string, decimal> FeatureImportance { get; set; } = new();
    public List<string> TrainingMetrics { get; set; } = new();
    public bool TrainingSuccessful { get; set; }
    public string? ErrorMessage { get; set; }
    public Dictionary<string, object> ModelParameters { get; set; } = new();
}

/// <summary>
/// Model performance metrics
/// </summary>
public class ModelPerformanceMetrics
{
    public string ModelVersion { get; set; } = string.Empty;
    public DateTime LastTrainingDate { get; set; }
    public decimal PredictionAccuracy { get; set; }
    public decimal RecommendationRelevance { get; set; }
    public decimal ImprovementSuccessRate { get; set; }
    public int PredictionsMade { get; set; }
    public int CorrectPredictions { get; set; }
    public Dictionary<string, decimal> MetricsByCategory { get; set; } = new();
    public List<string> ModelStrengths { get; set; } = new();
    public List<string> ModelWeaknesses { get; set; } = new();
    public DateTime LastEvaluationDate { get; set; }
}

/// <summary>
/// Review result for improvement suggestions
/// </summary>
public class ReviewResult
{
    public long SuggestionId { get; set; }
    public SuggestionReviewAction Action { get; set; }
    public bool Success { get; set; }
    public string Message { get; set; } = string.Empty;
    public string? ReviewedBy { get; set; }
    public DateTime ReviewDate { get; set; }
    public string? NextSteps { get; set; }
}

#region Supporting Models

public enum SuggestionStatus
{
    Pending,
    Approved,
    Rejected,
    Implemented,
    Testing
}

public enum ABTestStatus
{
    Created,
    Running,
    Completed,
    Stopped,
    Inconclusive
}

public enum TestRecommendation
{
    ImplementVariant,
    KeepOriginal,
    ExtendTest,
    CreateNewVariant
}

public class OptimizationChange
{
    public string ChangeType { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public string BeforeValue { get; set; } = string.Empty;
    public string AfterValue { get; set; } = string.Empty;
    public decimal ImpactScore { get; set; }
}

public class MetricComparison
{
    public string MetricName { get; set; } = string.Empty;
    public decimal OriginalValue { get; set; }
    public decimal VariantValue { get; set; }
    public decimal ImprovementPercent { get; set; }
    public decimal StatisticalSignificance { get; set; }
}

public class FeedbackTheme
{
    public string Theme { get; set; } = string.Empty;
    public int Frequency { get; set; }
    public decimal Sentiment { get; set; }
    public List<string> ExampleComments { get; set; } = new();
}

public class ImprovementSuggestionFromFeedback
{
    public string Suggestion { get; set; } = string.Empty;
    public int Frequency { get; set; }
    public decimal Priority { get; set; }
    public List<string> SupportingComments { get; set; } = new();
}

public class QualityIssue
{
    public string IssueType { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public decimal Severity { get; set; }
    public string Suggestion { get; set; } = string.Empty;
}

public class QualityStrength
{
    public string StrengthType { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public decimal Score { get; set; }
}

public class ReadabilityMetrics
{
    public decimal ReadabilityScore { get; set; }
    public int SentenceCount { get; set; }
    public decimal AverageSentenceLength { get; set; }
    public int ComplexWordCount { get; set; }
    public decimal ReadingLevel { get; set; }
}

public class StructureAnalysis
{
    public bool HasClearInstructions { get; set; }
    public bool HasExamples { get; set; }
    public bool HasBusinessContext { get; set; }
    public int SectionCount { get; set; }
    public decimal StructureScore { get; set; }
}

public class ContentCompleteness
{
    public decimal CompletenessScore { get; set; }
    public List<string> MissingElements { get; set; } = new();
    public List<string> PresentElements { get; set; } = new();
}

public class OptimizationEvent
{
    public DateTime Date { get; set; }
    public string OptimizationType { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public decimal ImpactMeasured { get; set; }
    public string OptimizedBy { get; set; } = string.Empty;
}

public class PerformanceSnapshot
{
    public DateTime Date { get; set; }
    public decimal SuccessRate { get; set; }
    public decimal UserRating { get; set; }
    public int ResponseTime { get; set; }
    public int UsageCount { get; set; }
}

/// <summary>
/// Usage pattern analysis for templates
/// </summary>
public class UsagePattern
{
    public string PatternType { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public int Frequency { get; set; }
    public decimal Confidence { get; set; }
    public decimal Impact { get; set; }
    public Dictionary<string, object> PatternData { get; set; } = new();
}

/// <summary>
/// Template performance metrics model (non-entity)
/// </summary>
public class TemplatePerformanceMetrics
{
    public string TemplateKey { get; set; } = string.Empty;
    public string TemplateName { get; set; } = string.Empty;
    public string IntentType { get; set; } = string.Empty;
    public int TotalUsages { get; set; }
    public int SuccessfulUsages { get; set; }
    public decimal SuccessRate { get; set; }
    public decimal AverageConfidenceScore { get; set; }
    public int AverageProcessingTimeMs { get; set; }
    public decimal? AverageUserRating { get; set; }
    public DateTime? LastUsedDate { get; set; }
    public DateTime CreatedDate { get; set; }
    public DateTime UpdatedDate { get; set; }
    public Dictionary<string, object> AdditionalMetrics { get; set; } = new();
}

#endregion
