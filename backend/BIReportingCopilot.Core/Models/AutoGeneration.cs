namespace BIReportingCopilot.Core.Models;

/// <summary>
/// Auto-generated business context for a database table
/// </summary>
public class AutoGeneratedTableContext
{
    public string TableName { get; set; } = string.Empty;
    public string SchemaName { get; set; } = string.Empty;
    public string BusinessPurpose { get; set; } = string.Empty;
    public string BusinessContext { get; set; } = string.Empty;
    public string PrimaryUseCase { get; set; } = string.Empty;
    public List<string> KeyBusinessMetrics { get; set; } = new();
    public List<string> CommonQueryPatterns { get; set; } = new();
    public string BusinessRules { get; set; } = string.Empty;
    public List<AutoGeneratedColumnContext> Columns { get; set; } = new();
    public List<string> RelatedTables { get; set; } = new();
    public double ConfidenceScore { get; set; }
    public DateTime GeneratedAt { get; set; } = DateTime.UtcNow;
    public string GenerationMethod { get; set; } = "AI";
    public bool IsAutoGenerated { get; set; } = true;
}

/// <summary>
/// Auto-generated business context for a database column
/// </summary>
public class AutoGeneratedColumnContext
{
    public string ColumnName { get; set; } = string.Empty;
    public string BusinessName { get; set; } = string.Empty;
    public string BusinessDescription { get; set; } = string.Empty;
    public string DataType { get; set; } = string.Empty;
    public string BusinessDataType { get; set; } = string.Empty;
    public List<string> SampleValues { get; set; } = new();
    public string ValueRange { get; set; } = string.Empty;
    public List<string> BusinessRules { get; set; } = new();
    public List<string> CommonUseCases { get; set; } = new();
    public bool IsPrimaryKey { get; set; }
    public bool IsForeignKey { get; set; }
    public string? ReferencedTable { get; set; }
    public double ConfidenceScore { get; set; }
    public bool IsAutoGenerated { get; set; } = true;
}

/// <summary>
/// Auto-generated business glossary term
/// </summary>
public class AutoGeneratedGlossaryTerm
{
    public string Term { get; set; } = string.Empty;
    public string Definition { get; set; } = string.Empty;
    public string BusinessContext { get; set; } = string.Empty;
    public List<string> Synonyms { get; set; } = new();
    public List<string> RelatedTerms { get; set; } = new();
    public string Category { get; set; } = string.Empty;
    public List<string> SourceTables { get; set; } = new();
    public List<string> SourceColumns { get; set; } = new();
    public string DataType { get; set; } = string.Empty;
    public List<string> ExampleValues { get; set; } = new();
    public double ConfidenceScore { get; set; }
    public DateTime GeneratedAt { get; set; } = DateTime.UtcNow;
    public bool IsAutoGenerated { get; set; } = true;
}

/// <summary>
/// Analysis of business relationships between tables
/// </summary>
public class BusinessRelationshipAnalysis
{
    public List<TableRelationship> Relationships { get; set; } = new();
    public List<BusinessDomain> BusinessDomains { get; set; } = new();
    public List<DataFlow> DataFlows { get; set; } = new();
    public DateTime AnalyzedAt { get; set; } = DateTime.UtcNow;
    public double OverallConfidence { get; set; }
}

/// <summary>
/// Relationship between two tables with business context
/// </summary>
public class TableRelationship
{
    public string FromTable { get; set; } = string.Empty;
    public string FromSchema { get; set; } = string.Empty;
    public string ToTable { get; set; } = string.Empty;
    public string ToSchema { get; set; } = string.Empty;
    public string RelationshipType { get; set; } = string.Empty; // OneToMany, ManyToMany, etc.
    public string BusinessRelationship { get; set; } = string.Empty;
    public List<ColumnMapping> ColumnMappings { get; set; } = new();
    public double ConfidenceScore { get; set; }
}

/// <summary>
/// Column mapping in a relationship
/// </summary>
public class ColumnMapping
{
    public string FromColumn { get; set; } = string.Empty;
    public string ToColumn { get; set; } = string.Empty;
    public string BusinessMeaning { get; set; } = string.Empty;
}

/// <summary>
/// Business domain grouping of related tables
/// </summary>
public class BusinessDomain
{
    public string DomainName { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public List<string> Tables { get; set; } = new();
    public List<string> KeyConcepts { get; set; } = new();
    public double ConfidenceScore { get; set; }
}

/// <summary>
/// Data flow between tables representing business processes
/// </summary>
public class DataFlow
{
    public string FlowName { get; set; } = string.Empty;
    public string BusinessProcess { get; set; } = string.Empty;
    public List<string> TableSequence { get; set; } = new();
    public string Description { get; set; } = string.Empty;
    public double ConfidenceScore { get; set; }
}

/// <summary>
/// Request for auto-generating business context
/// </summary>
public class AutoGenerationRequest
{
    public bool GenerateTableContexts { get; set; } = true;
    public bool GenerateGlossaryTerms { get; set; } = true;
    public bool AnalyzeRelationships { get; set; } = true;
    public List<string>? SpecificTables { get; set; }
    public List<string>? SpecificSchemas { get; set; }
    public Dictionary<string, List<string>>? SpecificFields { get; set; } // Map of table name to selected field names
    public bool OverwriteExisting { get; set; } = false;
    public double MinimumConfidenceThreshold { get; set; } = 0.6;
    public bool MockMode { get; set; } = false;

    // Property expected by Infrastructure services (alias for AnalyzeRelationships)
    /// <summary>
    /// Whether to generate relationships (alias for AnalyzeRelationships)
    /// </summary>
    public bool GenerateRelationships
    {
        get => AnalyzeRelationships;
        set => AnalyzeRelationships = value;
    }
}

/// <summary>
/// Response from auto-generation process
/// </summary>
public class AutoGenerationResponse
{
    public List<AutoGeneratedTableContext> GeneratedTableContexts { get; set; } = new();
    public List<AutoGeneratedGlossaryTerm> GeneratedGlossaryTerms { get; set; } = new();
    public BusinessRelationshipAnalysis? RelationshipAnalysis { get; set; }
    public int TotalTablesProcessed { get; set; }
    public int TotalColumnsProcessed { get; set; }
    public int TotalTermsGenerated { get; set; }
    public TimeSpan ProcessingTime { get; set; }
    public List<string> Warnings { get; set; } = new();
    public List<string> Errors { get; set; } = new();
    public bool Success { get; set; } = true;
}

/// <summary>
/// Progress update during auto-generation
/// </summary>
public class AutoGenerationProgress
{
    public string CurrentTask { get; set; } = string.Empty;
    public int CompletedItems { get; set; }
    public int TotalItems { get; set; }
    public double ProgressPercentage => TotalItems > 0 ? (double)CompletedItems / TotalItems * 100 : 0;
    public string? CurrentTable { get; set; }
    public List<string> RecentlyCompleted { get; set; } = new();
    public TimeSpan ElapsedTime { get; set; }
    public TimeSpan? EstimatedTimeRemaining { get; set; }
}
