using BIReportingCopilot.Core.Models;

namespace BIReportingCopilot.Core.Interfaces.Tuning;

/// <summary>
/// Tuning service interface for system optimization and performance tuning
/// </summary>
public interface ITuningService
{
    Task<TuningRecommendationsResult> GetRecommendationsAsync(CancellationToken cancellationToken = default);
    Task<TuningApplicationResult> ApplyRecommendationsAsync(List<string> recommendationIds, CancellationToken cancellationToken = default);
    Task<TuningMetrics> GetTuningMetricsAsync(CancellationToken cancellationToken = default);
    Task<PerformanceAnalysisResult> AnalyzePerformanceAsync(PerformanceAnalysisRequest request, CancellationToken cancellationToken = default);
    Task<QueryOptimizationResult> OptimizeQueryAsync(string query, CancellationToken cancellationToken = default);
    Task<IndexOptimizationResult> OptimizeIndexesAsync(string tableName, CancellationToken cancellationToken = default);
    Task<CacheOptimizationResult> OptimizeCacheAsync(CancellationToken cancellationToken = default);
    Task<SystemHealthReport> GetSystemHealthReportAsync(CancellationToken cancellationToken = default);
    Task<TuningConfiguration> GetTuningConfigurationAsync(CancellationToken cancellationToken = default);
    Task<bool> UpdateTuningConfigurationAsync(TuningConfiguration configuration, CancellationToken cancellationToken = default);

    // Business context management methods
    Task<TuningDashboardData> GetDashboardDataAsync(CancellationToken cancellationToken = default);
    Task<List<BusinessTable>> GetBusinessTablesAsync(CancellationToken cancellationToken = default);
    Task<BusinessTable?> GetBusinessTableAsync(string id, CancellationToken cancellationToken = default);
    Task<BusinessTable> CreateBusinessTableAsync(CreateBusinessTableRequest request, string userId, CancellationToken cancellationToken = default);
    Task<BusinessTable> UpdateBusinessTableAsync(string id, UpdateBusinessTableRequest request, string userId, CancellationToken cancellationToken = default);
    Task<bool> DeleteBusinessTableAsync(string id, CancellationToken cancellationToken = default);

    // Query pattern management methods
    Task<List<QueryPattern>> GetQueryPatternsAsync(CancellationToken cancellationToken = default);
    Task<QueryPattern?> GetQueryPatternAsync(string id, CancellationToken cancellationToken = default);
    Task<QueryPattern> CreateQueryPatternAsync(CreateQueryPatternRequest request, string userId, CancellationToken cancellationToken = default);
    Task<QueryPattern> UpdateQueryPatternAsync(string id, UpdateQueryPatternRequest request, string userId, CancellationToken cancellationToken = default);
    Task<bool> DeleteQueryPatternAsync(string id, CancellationToken cancellationToken = default);
    Task<QueryPatternTestResult> TestQueryPatternAsync(string id, string naturalLanguageQuery, CancellationToken cancellationToken = default);

    // Glossary management methods
    Task<List<GlossaryTerm>> GetGlossaryTermsAsync(CancellationToken cancellationToken = default);
    Task<GlossaryTerm> CreateGlossaryTermAsync(CreateGlossaryTermRequest request, string userId, CancellationToken cancellationToken = default);
    Task<GlossaryTerm> UpdateGlossaryTermAsync(string id, UpdateGlossaryTermRequest request, string userId, CancellationToken cancellationToken = default);
    Task<bool> DeleteGlossaryTermAsync(string id, CancellationToken cancellationToken = default);

    // AI settings management methods
    Task<List<AITuningSetting>> GetAISettingsAsync(CancellationToken cancellationToken = default);
    Task<AITuningSetting> UpdateAISettingAsync(string id, UpdateAISettingRequest request, string userId, CancellationToken cancellationToken = default);    // Auto-generation methods
    Task<AutoGenerateBusinessContextResponse> AutoGenerateBusinessContextAsync(AutoGenerateBusinessContextRequest request, string userId, CancellationToken cancellationToken = default);
    Task<List<BusinessTable>> AutoGenerateTableContextsAsync(string userId, CancellationToken cancellationToken = default);
    
    // Additional methods referenced in controllers
    Task<List<GlossaryTerm>> AutoGenerateGlossaryTermsAsync(string userId, CancellationToken cancellationToken = default);
    Task<object> AutoGenerateRelationshipAnalysisAsync(string userId, CancellationToken cancellationToken = default);
    Task<object> AutoGenerateTableContextAsync(string userId, CancellationToken cancellationToken = default);
    Task ApplyAutoGeneratedContextAsync(string userId, object context, CancellationToken cancellationToken = default);
    
    // Prompt template methods
    Task<List<object>> GetPromptTemplatesAsync(CancellationToken cancellationToken = default);
    Task<object> GetPromptTemplateAsync(string id, CancellationToken cancellationToken = default);
    Task<object> CreatePromptTemplateAsync(object request, CancellationToken cancellationToken = default);
    Task<object> UpdatePromptTemplateAsync(string id, object request, CancellationToken cancellationToken = default);
    Task DeletePromptTemplateAsync(string id, CancellationToken cancellationToken = default);
    Task ActivatePromptTemplateAsync(string id, CancellationToken cancellationToken = default);
    Task DeactivatePromptTemplateAsync(string id, CancellationToken cancellationToken = default);
    Task<object> TestPromptTemplateAsync(string id, object testData, CancellationToken cancellationToken = default);
}

/// <summary>
/// Tuning recommendations result
/// </summary>
public class TuningRecommendationsResult
{
    public List<TuningRecommendation> Recommendations { get; set; } = new();
    public TuningScore OverallScore { get; set; } = new();
    public DateTime GeneratedAt { get; set; } = DateTime.UtcNow;
    public string Summary { get; set; } = string.Empty;
}

/// <summary>
/// Tuning recommendation
/// </summary>
public class TuningRecommendation
{
    public string Id { get; set; } = Guid.NewGuid().ToString();
    public string Title { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public TuningCategory Category { get; set; }
    public TuningPriority Priority { get; set; }
    public double EstimatedImpact { get; set; }
    public string Implementation { get; set; } = string.Empty;
    public List<string> Prerequisites { get; set; } = new();
    public TimeSpan EstimatedTime { get; set; }
    public TuningRisk Risk { get; set; }
    public Dictionary<string, object> Metadata { get; set; } = new();
}

/// <summary>
/// Tuning category enumeration
/// </summary>
public enum TuningCategory
{
    Database,
    Queries,
    Indexes,
    Cache,
    Memory,
    CPU,
    Network,
    Storage,
    Configuration
}

/// <summary>
/// Tuning priority enumeration
/// </summary>
public enum TuningPriority
{
    Low = 1,
    Medium = 2,
    High = 3,
    Critical = 4
}

/// <summary>
/// Tuning risk enumeration
/// </summary>
public enum TuningRisk
{
    Low,
    Medium,
    High
}

/// <summary>
/// Tuning score
/// </summary>
public class TuningScore
{
    public double OverallScore { get; set; }
    public double PerformanceScore { get; set; }
    public double EfficiencyScore { get; set; }
    public double StabilityScore { get; set; }
    public double SecurityScore { get; set; }
    public string Grade { get; set; } = string.Empty;
    public Dictionary<TuningCategory, double> CategoryScores { get; set; } = new();
}

/// <summary>
/// Tuning application result
/// </summary>
public class TuningApplicationResult
{
    public bool Success { get; set; }
    public List<string> AppliedRecommendations { get; set; } = new();
    public List<string> FailedRecommendations { get; set; } = new();
    public List<string> Warnings { get; set; } = new();
    public string Message { get; set; } = string.Empty;
    public TimeSpan ExecutionTime { get; set; }
    public TuningScore BeforeScore { get; set; } = new();
    public TuningScore AfterScore { get; set; } = new();
}

/// <summary>
/// Tuning metrics
/// </summary>
public class TuningMetrics
{
    public DateTime CollectedAt { get; set; } = DateTime.UtcNow;
    public Dictionary<string, double> PerformanceMetrics { get; set; } = new();
    public Dictionary<string, double> ResourceUtilization { get; set; } = new();
    public Dictionary<string, long> CounterMetrics { get; set; } = new();
    public TuningScore Score { get; set; } = new();
    public List<string> ActiveIssues { get; set; } = new();
}

/// <summary>
/// Performance analysis request
/// </summary>
public class PerformanceAnalysisRequest
{
    public DateTime StartTime { get; set; }
    public DateTime EndTime { get; set; }
    public List<string> Metrics { get; set; } = new();
    public string? TableName { get; set; }
    public string? Query { get; set; }
    public Dictionary<string, object> Filters { get; set; } = new();
}

/// <summary>
/// Index optimization result
/// </summary>
public class IndexOptimizationResult
{
    public bool Success { get; set; }
    public string TableName { get; set; } = string.Empty;
    public List<IndexRecommendation> Recommendations { get; set; } = new();
    public List<string> AppliedOptimizations { get; set; } = new();
    public double EstimatedImprovement { get; set; }
    public string Message { get; set; } = string.Empty;
}

/// <summary>
/// Cache optimization result
/// </summary>
public class CacheOptimizationResult
{
    public bool Success { get; set; }
    public List<string> AppliedOptimizations { get; set; } = new();
    public double CacheHitRateImprovement { get; set; }
    public double MemoryUsageReduction { get; set; }
    public string Message { get; set; } = string.Empty;
    public Dictionary<string, object> Metrics { get; set; } = new();
}

/// <summary>
/// System health report
/// </summary>
public class SystemHealthReport
{
    public DateTime GeneratedAt { get; set; } = DateTime.UtcNow;
    public HealthStatus OverallHealth { get; set; }
    public Dictionary<string, HealthStatus> ComponentHealth { get; set; } = new();
    public List<HealthIssue> Issues { get; set; } = new();
    public Dictionary<string, object> Metrics { get; set; } = new();
    public List<string> Recommendations { get; set; } = new();
}

/// <summary>
/// Health status enumeration
/// </summary>
public enum HealthStatus
{
    Healthy,
    Warning,
    Critical,
    Unknown
}

/// <summary>
/// Health issue
/// </summary>
public class HealthIssue
{
    public string Id { get; set; } = Guid.NewGuid().ToString();
    public string Title { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public HealthStatus Severity { get; set; }
    public string Component { get; set; } = string.Empty;
    public DateTime DetectedAt { get; set; } = DateTime.UtcNow;
    public List<string> RecommendedActions { get; set; } = new();
}

/// <summary>
/// Tuning configuration
/// </summary>
public class TuningConfiguration
{
    public string Id { get; set; } = Guid.NewGuid().ToString();
    public bool AutoTuningEnabled { get; set; }
    public TuningAggressiveness Aggressiveness { get; set; }
    public List<TuningCategory> EnabledCategories { get; set; } = new();
    public Dictionary<string, object> Settings { get; set; } = new();
    public DateTime LastUpdated { get; set; } = DateTime.UtcNow;
    public string UpdatedBy { get; set; } = string.Empty;
}

/// <summary>
/// Tuning aggressiveness enumeration
/// </summary>
public enum TuningAggressiveness
{
    Conservative,
    Moderate,
    Aggressive
}

/// <summary>
/// Tuning dashboard data
/// </summary>
public class TuningDashboardData
{
    public TuningScore OverallScore { get; set; } = new();
    public Dictionary<string, object> Metrics { get; set; } = new();
    public List<TuningRecommendation> TopRecommendations { get; set; } = new();
    public SystemHealthReport HealthReport { get; set; } = new();
    public DateTime LastUpdated { get; set; } = DateTime.UtcNow;
}

/// <summary>
/// Business table request models
/// </summary>
public class CreateBusinessTableRequest
{
    public string Name { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public List<string> Columns { get; set; } = new();
    public Dictionary<string, object> Metadata { get; set; } = new();
}

public class UpdateBusinessTableRequest
{
    public string? Name { get; set; }
    public string? Description { get; set; }
    public List<string>? Columns { get; set; }
    public Dictionary<string, object>? Metadata { get; set; }
}

/// <summary>
/// Query pattern request models
/// </summary>
public class CreateQueryPatternRequest
{
    public string Name { get; set; } = string.Empty;
    public string Pattern { get; set; } = string.Empty;
    public string SqlTemplate { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
}

public class UpdateQueryPatternRequest
{
    public string? Name { get; set; }
    public string? Pattern { get; set; }
    public string? SqlTemplate { get; set; }
    public string? Description { get; set; }
}

/// <summary>
/// Query pattern test result
/// </summary>
public class QueryPatternTestResult
{
    public bool Success { get; set; }
    public string GeneratedSql { get; set; } = string.Empty;
    public double ConfidenceScore { get; set; }
    public List<string> Warnings { get; set; } = new();
    public string Message { get; set; } = string.Empty;
}

/// <summary>
/// Glossary term request models
/// </summary>
public class CreateGlossaryTermRequest
{
    public string Term { get; set; } = string.Empty;
    public string Definition { get; set; } = string.Empty;
    public List<string> Synonyms { get; set; } = new();
    public string Category { get; set; } = string.Empty;
}

public class UpdateGlossaryTermRequest
{
    public string? Term { get; set; }
    public string? Definition { get; set; }
    public List<string>? Synonyms { get; set; }
    public string? Category { get; set; }
}

/// <summary>
/// AI tuning setting request models
/// </summary>
public class UpdateAISettingRequest
{
    public string Name { get; set; } = string.Empty;
    public object Value { get; set; } = new();
    public string Description { get; set; } = string.Empty;
}

/// <summary>
/// Auto-generation request models
/// </summary>
public class AutoGenerateBusinessContextRequest
{
    public List<string> TableNames { get; set; } = new();
    public bool IncludeRelationships { get; set; } = true;
    public bool GenerateDescriptions { get; set; } = true;
}

public class AutoGenerateBusinessContextResponse
{
    public bool Success { get; set; }
    public List<BusinessTable> GeneratedTables { get; set; } = new();
    public List<string> Warnings { get; set; } = new();
    public string Message { get; set; } = string.Empty;
}

/// <summary>
/// Glossary term model
/// </summary>
public class GlossaryTerm
{
    public string Id { get; set; } = Guid.NewGuid().ToString();
    public string Term { get; set; } = string.Empty;
    public string Definition { get; set; } = string.Empty;
    public List<string> Synonyms { get; set; } = new();
    public string Category { get; set; } = string.Empty;
    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
    public string CreatedBy { get; set; } = string.Empty;
    public DateTime? UpdatedAt { get; set; }
    public string? UpdatedBy { get; set; }
}

/// <summary>
/// AI tuning setting model
/// </summary>
public class AITuningSetting
{
    public string Id { get; set; } = Guid.NewGuid().ToString();
    public string Name { get; set; } = string.Empty;
    public object Value { get; set; } = new();
    public string Description { get; set; } = string.Empty;
    public AITuningCategory Category { get; set; }
    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
    public DateTime? UpdatedAt { get; set; }
    public string? UpdatedBy { get; set; }
}

/// <summary>
/// AI tuning category enumeration
/// </summary>
public enum AITuningCategory
{
    ModelParameters,
    PromptTemplates,
    ResponseFormats,
    PerformanceSettings,
    CacheSettings
}

/// <summary>
/// Performance analysis result
/// </summary>
public class PerformanceAnalysisResult
{
    public string Name { get; set; } = string.Empty;
    public Dictionary<string, object> Metrics { get; set; } = new();
    public List<string> Recommendations { get; set; } = new();
    public double PerformanceScore { get; set; }
    public DateTime AnalyzedAt { get; set; } = DateTime.UtcNow;
    public TimeSpan AnalysisTime { get; set; }
    public List<PerformanceIssue> Issues { get; set; } = new();
}

/// <summary>
/// Performance issue
/// </summary>
public class PerformanceIssue
{
    public string Id { get; set; } = Guid.NewGuid().ToString();
    public string Title { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public PerformanceSeverity Severity { get; set; }
    public string RecommendedAction { get; set; } = string.Empty;
    public Dictionary<string, object> Metadata { get; set; } = new();
}

/// <summary>
/// Performance severity enumeration
/// </summary>
public enum PerformanceSeverity
{
    Low,
    Medium,
    High,
    Critical
}
