import React, { useState } from 'react';
import { Card, Button, Space, Typography, Tabs, Table, Tag, Alert, Statistic, Row, Col, Collapse, Badge, Modal, Descriptions, List } from 'antd';
import { CheckCircleOutlined, TableOutlined, BookOutlined, ShareAltOutlined, EyeOutlined, DeleteOutlined, SaveOutlined, ColumnHeightOutlined, KeyOutlined } from '@ant-design/icons';
import { AutoGenerationResponse, AutoGeneratedTableContext, AutoGeneratedGlossaryTerm } from '../../../services/tuningApi';

const { Title, Text, Paragraph } = Typography;
const { TabPane } = Tabs;
const { Panel } = Collapse;

interface AutoGenerationResultsProps {
  results: AutoGenerationResponse;
  onApply: () => void;
  onDiscard: () => void;
}

export const AutoGenerationResults: React.FC<AutoGenerationResultsProps> = ({
  results,
  onApply,
  onDiscard
}) => {
  const [selectedTableContext, setSelectedTableContext] = useState<AutoGeneratedTableContext | null>(null);
  const [selectedGlossaryTerm, setSelectedGlossaryTerm] = useState<AutoGeneratedGlossaryTerm | null>(null);
  const [tableModalVisible, setTableModalVisible] = useState(false);
  const [glossaryModalVisible, setGlossaryModalVisible] = useState(false);

  const getConfidenceColor = (score: number) => {
    if (score >= 0.8) return '#52c41a';
    if (score >= 0.6) return '#faad14';
    return '#ff4d4f';
  };

  const getConfidenceText = (score: number) => {
    if (score >= 0.8) return 'High';
    if (score >= 0.6) return 'Medium';
    return 'Low';
  };

  const handleViewTableDetails = (record: AutoGeneratedTableContext) => {
    setSelectedTableContext(record);
    setTableModalVisible(true);
  };

  const handleViewGlossaryDetails = (record: AutoGeneratedGlossaryTerm) => {
    setSelectedGlossaryTerm(record);
    setGlossaryModalVisible(true);
  };

  const tableContextColumns = [
    {
      title: 'Table',
      dataIndex: 'tableName',
      key: 'tableName',
      render: (text: string, record: AutoGeneratedTableContext) => (
        <Space>
          <TableOutlined />
          <Text strong>{record.schemaName}.{text}</Text>
        </Space>
      ),
    },
    {
      title: 'Business Purpose',
      dataIndex: 'businessPurpose',
      key: 'businessPurpose',
      ellipsis: true,
      width: 300,
    },
    {
      title: 'Columns',
      dataIndex: 'columns',
      key: 'columns',
      render: (columns: any[]) => (
        <Text>{columns.length} columns</Text>
      ),
    },
    {
      title: 'Confidence',
      dataIndex: 'confidenceScore',
      key: 'confidenceScore',
      render: (score: number) => (
        <Tag color={getConfidenceColor(score)}>
          {getConfidenceText(score)} ({Math.round(score * 100)}%)
        </Tag>
      ),
    },
    {
      title: 'Actions',
      key: 'actions',
      render: (record: AutoGeneratedTableContext) => (
        <Button
          type="link"
          icon={<EyeOutlined />}
          onClick={() => handleViewTableDetails(record)}
        >
          View Details
        </Button>
      ),
    },
  ];

  const glossaryTermColumns = [
    {
      title: 'Term',
      dataIndex: 'term',
      key: 'term',
      render: (text: string) => (
        <Space>
          <BookOutlined />
          <Text strong>{text}</Text>
        </Space>
      ),
    },
    {
      title: 'Definition',
      dataIndex: 'definition',
      key: 'definition',
      ellipsis: true,
      width: 300,
    },
    {
      title: 'Category',
      dataIndex: 'category',
      key: 'category',
      render: (category: string) => (
        <Tag>{category}</Tag>
      ),
    },
    {
      title: 'Sources',
      key: 'sources',
      render: (record: AutoGeneratedGlossaryTerm) => (
        <Text>{record.sourceTables.length + record.sourceColumns.length} sources</Text>
      ),
    },
    {
      title: 'Confidence',
      dataIndex: 'confidenceScore',
      key: 'confidenceScore',
      render: (score: number) => (
        <Tag color={getConfidenceColor(score)}>
          {getConfidenceText(score)} ({Math.round(score * 100)}%)
        </Tag>
      ),
    },
    {
      title: 'Actions',
      key: 'actions',
      render: (record: AutoGeneratedGlossaryTerm) => (
        <Button
          type="link"
          icon={<EyeOutlined />}
          onClick={() => handleViewGlossaryDetails(record)}
        >
          View Details
        </Button>
      ),
    },
  ];

  return (
    <div>
      <Card style={{ marginBottom: '24px' }}>
        <div style={{ marginBottom: '24px' }}>
          <Title level={4}>
            <CheckCircleOutlined style={{ marginRight: '8px', color: '#52c41a' }} />
            Auto-Generation Results
          </Title>
          <Paragraph type="secondary">
            Review the auto-generated business context below. You can examine each item in detail
            and then choose to apply all results or discard them.
          </Paragraph>
        </div>

        {/* Summary Statistics */}
        <Row gutter={16} style={{ marginBottom: '24px' }}>
          <Col span={6}>
            <Statistic
              title="Tables Processed"
              value={results.totalTablesProcessed}
              prefix={<TableOutlined />}
            />
          </Col>
          <Col span={6}>
            <Statistic
              title="Columns Analyzed"
              value={results.totalColumnsProcessed}
              prefix={<ShareAltOutlined />}
            />
          </Col>
          <Col span={6}>
            <Statistic
              title="Glossary Terms"
              value={results.totalTermsGenerated}
              prefix={<BookOutlined />}
            />
          </Col>
          <Col span={6}>
            <Statistic
              title="Processing Time"
              value={results.processingTime}
              suffix="ms"
            />
          </Col>
        </Row>

        {/* Warnings and Errors */}
        {results.warnings.length > 0 && (
          <Alert
            message="Warnings"
            description={
              <ul>
                {results.warnings.map((warning, index) => (
                  <li key={index}>{warning}</li>
                ))}
              </ul>
            }
            type="warning"
            showIcon
            style={{ marginBottom: '16px' }}
          />
        )}

        {results.errors.length > 0 && (
          <Alert
            message="Errors"
            description={
              <ul>
                {results.errors.map((error, index) => (
                  <li key={index}>{error}</li>
                ))}
              </ul>
            }
            type="error"
            showIcon
            style={{ marginBottom: '16px' }}
          />
        )}

        {/* Results Tabs */}
        <Tabs defaultActiveKey="tables">
          <TabPane
            tab={
              <Badge count={results.generatedTableContexts.length} showZero>
                <Space>
                  <TableOutlined />
                  Table Contexts
                </Space>
              </Badge>
            }
            key="tables"
          >
            <Table
              dataSource={results.generatedTableContexts}
              columns={tableContextColumns}
              rowKey={(record) => `${record.schemaName}.${record.tableName}`}
              pagination={{ pageSize: 10 }}
              size="small"
            />
          </TabPane>

          <TabPane
            tab={
              <Badge count={results.generatedGlossaryTerms.length} showZero>
                <Space>
                  <BookOutlined />
                  Glossary Terms
                </Space>
              </Badge>
            }
            key="glossary"
          >
            <Table
              dataSource={results.generatedGlossaryTerms}
              columns={glossaryTermColumns}
              rowKey="term"
              pagination={{ pageSize: 10 }}
              size="small"
            />
          </TabPane>

          {results.relationshipAnalysis && (
            <TabPane
              tab={
                <Badge count={results.relationshipAnalysis.relationships.length} showZero>
                  <Space>
                    <ShareAltOutlined />
                    Relationships
                  </Space>
                </Badge>
              }
              key="relationships"
            >
              <Collapse>
                <Panel header="Business Domains" key="domains">
                  {results.relationshipAnalysis.businessDomains.map((domain, index) => (
                    <Card key={index} size="small" style={{ marginBottom: '8px' }}>
                      <Title level={5}>{domain.domainName}</Title>
                      <Paragraph>{domain.description}</Paragraph>
                      <Space wrap>
                        {domain.tables.map((table, tableIndex) => (
                          <Tag key={tableIndex}>{table}</Tag>
                        ))}
                      </Space>
                    </Card>
                  ))}
                </Panel>

                <Panel header="Table Relationships" key="relationships">
                  {results.relationshipAnalysis.relationships.map((rel, index) => (
                    <Card key={index} size="small" style={{ marginBottom: '8px' }}>
                      <Text strong>
                        {rel.fromSchema}.{rel.fromTable} â†’ {rel.toSchema}.{rel.toTable}
                      </Text>
                      <br />
                      <Text type="secondary">{rel.businessRelationship}</Text>
                      <br />
                      <Tag color={getConfidenceColor(rel.confidenceScore)}>
                        {Math.round(rel.confidenceScore * 100)}% confidence
                      </Tag>
                    </Card>
                  ))}
                </Panel>
              </Collapse>
            </TabPane>
          )}
        </Tabs>

        {/* Action Buttons */}
        <div style={{ marginTop: '24px', textAlign: 'center' }}>
          <Space size="large">
            <Button
              type="default"
              icon={<DeleteOutlined />}
              onClick={onDiscard}
              size="large"
            >
              Discard Results
            </Button>
            <Button
              type="primary"
              icon={<SaveOutlined />}
              onClick={onApply}
              size="large"
            >
              Apply All Results
            </Button>
          </Space>
        </div>

        <div style={{ marginTop: '16px', textAlign: 'center' }}>
          <Text type="secondary" style={{ fontSize: '12px' }}>
            Applying results will add the auto-generated content to your business context database.
            <br />
            You can always edit or remove individual items later through the respective management tabs.
          </Text>
        </div>
      </Card>

      {/* Table Details Modal */}
      <Modal
        title={
          selectedTableContext ? (
            <Space>
              <TableOutlined />
              <span>{selectedTableContext.schemaName}.{selectedTableContext.tableName}</span>
              <Tag color={getConfidenceColor(selectedTableContext.confidenceScore)}>
                {getConfidenceText(selectedTableContext.confidenceScore)} Confidence
              </Tag>
            </Space>
          ) : 'Table Details'
        }
        open={tableModalVisible}
        onCancel={() => setTableModalVisible(false)}
        footer={[
          <Button key="close" onClick={() => setTableModalVisible(false)}>
            Close
          </Button>
        ]}
        width={800}
      >
        {selectedTableContext && (
          <div>
            <Descriptions bordered column={1} size="small">
              <Descriptions.Item label="Business Purpose">
                {selectedTableContext.businessPurpose}
              </Descriptions.Item>
              <Descriptions.Item label="Business Context">
                {selectedTableContext.businessContext}
              </Descriptions.Item>
              <Descriptions.Item label="Primary Use Case">
                {selectedTableContext.primaryUseCase}
              </Descriptions.Item>
              <Descriptions.Item label="Business Rules">
                {selectedTableContext.businessRules}
              </Descriptions.Item>
              <Descriptions.Item label="Generation Method">
                {selectedTableContext.generationMethod}
              </Descriptions.Item>
              <Descriptions.Item label="Generated At">
                {new Date(selectedTableContext.generatedAt).toLocaleString()}
              </Descriptions.Item>
              <Descriptions.Item label="Confidence Score">
                <Tag color={getConfidenceColor(selectedTableContext.confidenceScore)}>
                  {Math.round(selectedTableContext.confidenceScore * 100)}%
                </Tag>
              </Descriptions.Item>
            </Descriptions>

            {selectedTableContext.keyBusinessMetrics.length > 0 && (
              <div style={{ marginTop: '16px' }}>
                <Title level={5}>Key Business Metrics</Title>
                <Space wrap>
                  {selectedTableContext.keyBusinessMetrics.map((metric, index) => (
                    <Tag key={index} color="blue">{metric}</Tag>
                  ))}
                </Space>
              </div>
            )}

            {selectedTableContext.commonQueryPatterns.length > 0 && (
              <div style={{ marginTop: '16px' }}>
                <Title level={5}>Common Query Patterns</Title>
                <Space wrap>
                  {selectedTableContext.commonQueryPatterns.map((pattern, index) => (
                    <Tag key={index} color="green">{pattern}</Tag>
                  ))}
                </Space>
              </div>
            )}

            {selectedTableContext.columns.length > 0 && (
              <div style={{ marginTop: '16px' }}>
                <Title level={5}>
                  <ColumnHeightOutlined /> Column Information ({selectedTableContext.columns.length} columns)
                </Title>
                <List
                  size="small"
                  dataSource={selectedTableContext.columns}
                  renderItem={(column) => (
                    <List.Item>
                      <List.Item.Meta
                        avatar={column.isPrimaryKey ? <KeyOutlined style={{ color: '#faad14' }} /> : <ColumnHeightOutlined />}
                        title={
                          <Space>
                            <Text strong>{column.columnName}</Text>
                            {column.isPrimaryKey && <Tag color="gold">Primary Key</Tag>}
                            {column.isForeignKey && <Tag color="purple">Foreign Key</Tag>}
                          </Space>
                        }
                        description={
                          <div>
                            <Text>{column.businessDescription}</Text>
                            <br />
                            <Text type="secondary" style={{ fontSize: '12px' }}>
                              Type: {column.dataType} | Business Type: {column.businessDataType}
                            </Text>
                          </div>
                        }
                      />
                    </List.Item>
                  )}
                />
              </div>
            )}

            {selectedTableContext.relatedTables.length > 0 && (
              <div style={{ marginTop: '16px' }}>
                <Title level={5}>Related Tables</Title>
                <Space wrap>
                  {selectedTableContext.relatedTables.map((table, index) => (
                    <Tag key={index} color="cyan">{table}</Tag>
                  ))}
                </Space>
              </div>
            )}
          </div>
        )}
      </Modal>

      {/* Glossary Term Details Modal */}
      <Modal
        title={
          selectedGlossaryTerm ? (
            <Space>
              <BookOutlined />
              <span>{selectedGlossaryTerm.term}</span>
              <Tag color={getConfidenceColor(selectedGlossaryTerm.confidenceScore)}>
                {getConfidenceText(selectedGlossaryTerm.confidenceScore)} Confidence
              </Tag>
            </Space>
          ) : 'Glossary Term Details'
        }
        open={glossaryModalVisible}
        onCancel={() => setGlossaryModalVisible(false)}
        footer={[
          <Button key="close" onClick={() => setGlossaryModalVisible(false)}>
            Close
          </Button>
        ]}
        width={700}
      >
        {selectedGlossaryTerm && (
          <div>
            <Descriptions bordered column={1} size="small">
              <Descriptions.Item label="Term">
                {selectedGlossaryTerm.term}
              </Descriptions.Item>
              <Descriptions.Item label="Definition">
                {selectedGlossaryTerm.definition}
              </Descriptions.Item>
              <Descriptions.Item label="Category">
                <Tag>{selectedGlossaryTerm.category}</Tag>
              </Descriptions.Item>
              <Descriptions.Item label="Business Context">
                {selectedGlossaryTerm.businessContext}
              </Descriptions.Item>
              <Descriptions.Item label="Confidence Score">
                <Tag color={getConfidenceColor(selectedGlossaryTerm.confidenceScore)}>
                  {Math.round(selectedGlossaryTerm.confidenceScore * 100)}%
                </Tag>
              </Descriptions.Item>
            </Descriptions>

            {selectedGlossaryTerm.sourceTables.length > 0 && (
              <div style={{ marginTop: '16px' }}>
                <Title level={5}>Source Tables</Title>
                <Space wrap>
                  {selectedGlossaryTerm.sourceTables.map((table, index) => (
                    <Tag key={index} color="blue" icon={<TableOutlined />}>{table}</Tag>
                  ))}
                </Space>
              </div>
            )}

            {selectedGlossaryTerm.sourceColumns.length > 0 && (
              <div style={{ marginTop: '16px' }}>
                <Title level={5}>Source Columns</Title>
                <Space wrap>
                  {selectedGlossaryTerm.sourceColumns.map((column, index) => (
                    <Tag key={index} color="green" icon={<ColumnHeightOutlined />}>{column}</Tag>
                  ))}
                </Space>
              </div>
            )}

            {selectedGlossaryTerm.synonyms.length > 0 && (
              <div style={{ marginTop: '16px' }}>
                <Title level={5}>Synonyms</Title>
                <Space wrap>
                  {selectedGlossaryTerm.synonyms.map((synonym, index) => (
                    <Tag key={index} color="orange">{synonym}</Tag>
                  ))}
                </Space>
              </div>
            )}

            {selectedGlossaryTerm.relatedTerms.length > 0 && (
              <div style={{ marginTop: '16px' }}>
                <Title level={5}>Related Terms</Title>
                <Space wrap>
                  {selectedGlossaryTerm.relatedTerms.map((term, index) => (
                    <Tag key={index} color="purple">{term}</Tag>
                  ))}
                </Space>
              </div>
            )}
          </div>
        )}
      </Modal>
    </div>
  );
};
