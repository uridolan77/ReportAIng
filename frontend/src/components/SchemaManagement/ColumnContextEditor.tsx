import React from 'react';
import { Card, CardContent } from '../ui';
import { Badge } from '../ui';
import { Columns } from 'lucide-react';
import { SchemaColumnContextDto, SchemaTableContextDto } from '../../types/schemaManagement';

interface ColumnContextEditorProps {
  columnContexts: SchemaColumnContextDto[];
  tableContexts: SchemaTableContextDto[];
  searchTerm: string;
  filterType: 'all' | 'auto' | 'manual';
  onUpdate: (updated: SchemaColumnContextDto) => void;
}

export const ColumnContextEditor: React.FC<ColumnContextEditorProps> = ({
  columnContexts,
  tableContexts,
  searchTerm,
  filterType,
  onUpdate
}) => {
  const filteredColumns = columnContexts.filter(column => {
    const matchesSearch = !searchTerm || 
      column.columnName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      column.businessName?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      column.businessDescription?.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesFilter = filterType === 'all' || 
      (filterType === 'auto' && column.isAutoGenerated) ||
      (filterType === 'manual' && !column.isAutoGenerated);

    return matchesSearch && matchesFilter;
  });

  if (filteredColumns.length === 0) {
    return (
      <div className="text-center py-8">
        <Columns className="h-12 w-12 text-gray-400 mx-auto mb-4" />
        <h3 className="text-lg font-medium text-gray-900 mb-2">No Columns Found</h3>
        <p className="text-gray-600">
          {searchTerm ? 'No columns match your search criteria.' : 'No column contexts available.'}
        </p>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {filteredColumns.map((column) => {
        const table = tableContexts.find(t => t.id === column.tableContextId);
        return (
          <Card key={column.id}>
            <CardContent className="p-4">
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-2">
                    <h4 className="font-medium text-gray-900">
                      {table?.tableName}.{column.columnName}
                    </h4>
                    {column.isAutoGenerated && (
                      <Badge variant="secondary" className="text-xs">Auto</Badge>
                    )}
                    {column.isPrimaryKey && (
                      <Badge variant="default" className="text-xs">PK</Badge>
                    )}
                    {column.isForeignKey && (
                      <Badge variant="outline" className="text-xs">FK</Badge>
                    )}
                  </div>
                  <p className="text-sm text-gray-600 mb-2">
                    {column.businessDescription || 'No description available'}
                  </p>
                  <div className="flex items-center gap-4 text-xs text-gray-500">
                    <span>Business Name: {column.businessName || 'Not set'}</span>
                    <span>Type: {column.businessDataType || 'Not set'}</span>
                    {column.confidenceScore && (
                      <span>Confidence: {Math.round(column.confidenceScore * 100)}%</span>
                    )}
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        );
      })}
    </div>
  );
};
