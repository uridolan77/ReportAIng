import React, { useState } from 'react';
import { Button } from '../ui';
import { Input } from '../ui';
import { Textarea } from '../ui';
import { Badge } from '../ui';
import { Label } from '../ui';
import { Save, Edit, X, Plus } from 'lucide-react';
import { SchemaTableContextDto, UpdateTableContextRequest } from '../../types/schemaManagement';
import { schemaManagementApi } from '../../services/schemaManagementApi';

interface TableContextEditorProps {
  tableContext: SchemaTableContextDto;
  onUpdate: (updated: SchemaTableContextDto) => void;
}

export const TableContextEditor: React.FC<TableContextEditorProps> = ({
  tableContext,
  onUpdate
}) => {
  const [editing, setEditing] = useState(false);
  const [saving, setSaving] = useState(false);
  const [formData, setFormData] = useState<UpdateTableContextRequest>({
    businessPurpose: tableContext.businessPurpose || '',
    businessContext: tableContext.businessContext || '',
    primaryUseCase: tableContext.primaryUseCase || '',
    keyBusinessMetrics: [...tableContext.keyBusinessMetrics],
    commonQueryPatterns: [...tableContext.commonQueryPatterns],
    businessRules: [...tableContext.businessRules]
  });

  const [newMetric, setNewMetric] = useState('');
  const [newPattern, setNewPattern] = useState('');
  const [newRule, setNewRule] = useState('');

  const handleSave = async () => {
    try {
      setSaving(true);
      const updated = await schemaManagementApi.updateTableContext(tableContext.id, formData);
      onUpdate(updated);
      setEditing(false);
    } catch (error) {
      console.error('Error updating table context:', error);
    } finally {
      setSaving(false);
    }
  };

  const handleCancel = () => {
    setFormData({
      businessPurpose: tableContext.businessPurpose || '',
      businessContext: tableContext.businessContext || '',
      primaryUseCase: tableContext.primaryUseCase || '',
      keyBusinessMetrics: [...tableContext.keyBusinessMetrics],
      commonQueryPatterns: [...tableContext.commonQueryPatterns],
      businessRules: [...tableContext.businessRules]
    });
    setEditing(false);
  };

  const addMetric = () => {
    if (newMetric.trim() && !formData.keyBusinessMetrics?.includes(newMetric.trim())) {
      setFormData(prev => ({
        ...prev,
        keyBusinessMetrics: [...(prev.keyBusinessMetrics || []), newMetric.trim()]
      }));
      setNewMetric('');
    }
  };

  const removeMetric = (metric: string) => {
    setFormData(prev => ({
      ...prev,
      keyBusinessMetrics: prev.keyBusinessMetrics?.filter(m => m !== metric) || []
    }));
  };

  const addPattern = () => {
    if (newPattern.trim() && !formData.commonQueryPatterns?.includes(newPattern.trim())) {
      setFormData(prev => ({
        ...prev,
        commonQueryPatterns: [...(prev.commonQueryPatterns || []), newPattern.trim()]
      }));
      setNewPattern('');
    }
  };

  const removePattern = (pattern: string) => {
    setFormData(prev => ({
      ...prev,
      commonQueryPatterns: prev.commonQueryPatterns?.filter(p => p !== pattern) || []
    }));
  };

  const addRule = () => {
    if (newRule.trim() && !formData.businessRules?.includes(newRule.trim())) {
      setFormData(prev => ({
        ...prev,
        businessRules: [...(prev.businessRules || []), newRule.trim()]
      }));
      setNewRule('');
    }
  };

  const removeRule = (rule: string) => {
    setFormData(prev => ({
      ...prev,
      businessRules: prev.businessRules?.filter(r => r !== rule) || []
    }));
  };

  if (!editing) {
    return (
      <div className="space-y-4">
        <div className="flex justify-between items-start">
          <div className="flex-1">
            <div className="flex items-center gap-2 mb-2">
              <h4 className="font-medium text-gray-900">{tableContext.tableName}</h4>
              {tableContext.isAutoGenerated && (
                <Badge variant="secondary" className="text-xs">Auto-generated</Badge>
              )}
              {tableContext.confidenceScore && (
                <Badge variant="outline" className="text-xs">
                  {Math.round(tableContext.confidenceScore * 100)}% confidence
                </Badge>
              )}
            </div>
          </div>
          <Button size="small" onClick={() => setEditing(true)}>
            <Edit className="h-4 w-4 mr-2" />
            Edit
          </Button>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <Label className="text-sm font-medium text-gray-700">Business Purpose</Label>
            <p className="text-sm text-gray-600 mt-1">
              {tableContext.businessPurpose || 'No purpose defined'}
            </p>
          </div>
          <div>
            <Label className="text-sm font-medium text-gray-700">Primary Use Case</Label>
            <p className="text-sm text-gray-600 mt-1">
              {tableContext.primaryUseCase || 'No use case defined'}
            </p>
          </div>
        </div>

        <div>
          <Label className="text-sm font-medium text-gray-700">Business Context</Label>
          <p className="text-sm text-gray-600 mt-1">
            {tableContext.businessContext || 'No context provided'}
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <Label className="text-sm font-medium text-gray-700">Key Metrics</Label>
            <div className="flex flex-wrap gap-1 mt-1">
              {tableContext.keyBusinessMetrics.length > 0 ? (
                tableContext.keyBusinessMetrics.map((metric, index) => (
                  <Badge key={index} variant="outline" className="text-xs">{metric}</Badge>
                ))
              ) : (
                <span className="text-sm text-gray-500">No metrics defined</span>
              )}
            </div>
          </div>
          <div>
            <Label className="text-sm font-medium text-gray-700">Query Patterns</Label>
            <div className="flex flex-wrap gap-1 mt-1">
              {tableContext.commonQueryPatterns.length > 0 ? (
                tableContext.commonQueryPatterns.map((pattern, index) => (
                  <Badge key={index} variant="outline" className="text-xs">{pattern}</Badge>
                ))
              ) : (
                <span className="text-sm text-gray-500">No patterns defined</span>
              )}
            </div>
          </div>
          <div>
            <Label className="text-sm font-medium text-gray-700">Business Rules</Label>
            <div className="flex flex-wrap gap-1 mt-1">
              {tableContext.businessRules.length > 0 ? (
                tableContext.businessRules.map((rule, index) => (
                  <Badge key={index} variant="outline" className="text-xs">{rule}</Badge>
                ))
              ) : (
                <span className="text-sm text-gray-500">No rules defined</span>
              )}
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <h4 className="font-medium text-gray-900">Editing: {tableContext.tableName}</h4>
        <div className="flex gap-2">
          <Button size="small" onClick={handleCancel} disabled={saving}>
            <X className="h-4 w-4 mr-2" />
            Cancel
          </Button>
          <Button size="small" onClick={handleSave} disabled={saving}>
            <Save className="h-4 w-4 mr-2" />
            {saving ? 'Saving...' : 'Save'}
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <Label htmlFor="businessPurpose">Business Purpose</Label>
          <Textarea
            id="businessPurpose"
            value={formData.businessPurpose || ''}
            onChange={(e) => setFormData(prev => ({ ...prev, businessPurpose: e.target.value }))}
            placeholder="What is this table used for?"
            rows={2}
          />
        </div>
        <div>
          <Label htmlFor="primaryUseCase">Primary Use Case</Label>
          <Textarea
            id="primaryUseCase"
            value={formData.primaryUseCase || ''}
            onChange={(e) => setFormData(prev => ({ ...prev, primaryUseCase: e.target.value }))}
            placeholder="Main business scenario for this table"
            rows={2}
          />
        </div>
      </div>

      <div>
        <Label htmlFor="businessContext">Business Context</Label>
        <Textarea
          id="businessContext"
          value={formData.businessContext || ''}
          onChange={(e) => setFormData(prev => ({ ...prev, businessContext: e.target.value }))}
          placeholder="Detailed business context and background"
          rows={3}
        />
      </div>

      {/* Key Business Metrics */}
      <div>
        <Label>Key Business Metrics</Label>
        <div className="flex gap-2 mt-1">
          <Input
            value={newMetric}
            onChange={(e) => setNewMetric(e.target.value)}
            placeholder="Add a metric"
            onKeyPress={(e) => e.key === 'Enter' && addMetric()}
          />
          <Button size="small" onClick={addMetric}>
            <Plus className="h-4 w-4" />
          </Button>
        </div>
        <div className="flex flex-wrap gap-1 mt-2">
          {formData.keyBusinessMetrics?.map((metric, index) => (
            <Badge key={index} variant="secondary" className="flex items-center gap-1">
              {metric}
              <button onClick={() => removeMetric(metric)} className="ml-1 hover:bg-gray-300 rounded-full p-0.5">
                <X className="h-3 w-3" />
              </button>
            </Badge>
          ))}
        </div>
      </div>

      {/* Common Query Patterns */}
      <div>
        <Label>Common Query Patterns</Label>
        <div className="flex gap-2 mt-1">
          <Input
            value={newPattern}
            onChange={(e) => setNewPattern(e.target.value)}
            placeholder="Add a query pattern"
            onKeyPress={(e) => e.key === 'Enter' && addPattern()}
          />
          <Button size="small" onClick={addPattern}>
            <Plus className="h-4 w-4" />
          </Button>
        </div>
        <div className="flex flex-wrap gap-1 mt-2">
          {formData.commonQueryPatterns?.map((pattern, index) => (
            <Badge key={index} variant="secondary" className="flex items-center gap-1">
              {pattern}
              <button onClick={() => removePattern(pattern)} className="ml-1 hover:bg-gray-300 rounded-full p-0.5">
                <X className="h-3 w-3" />
              </button>
            </Badge>
          ))}
        </div>
      </div>

      {/* Business Rules */}
      <div>
        <Label>Business Rules</Label>
        <div className="flex gap-2 mt-1">
          <Input
            value={newRule}
            onChange={(e) => setNewRule(e.target.value)}
            placeholder="Add a business rule"
            onKeyPress={(e) => e.key === 'Enter' && addRule()}
          />
          <Button size="small" onClick={addRule}>
            <Plus className="h-4 w-4" />
          </Button>
        </div>
        <div className="flex flex-wrap gap-1 mt-2">
          {formData.businessRules?.map((rule, index) => (
            <Badge key={index} variant="secondary" className="flex items-center gap-1">
              {rule}
              <button onClick={() => removeRule(rule)} className="ml-1 hover:bg-gray-300 rounded-full p-0.5">
                <X className="h-3 w-3" />
              </button>
            </Badge>
          ))}
        </div>
      </div>
    </div>
  );
};
