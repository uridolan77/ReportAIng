/**
 * Unified Types Index
 * Centralized export of all type definitions for better organization and tree-shaking
 */

// ===== CORE TYPES =====
// Query-related types
export type {
  QueryRequest,
  QueryOptions,
  QueryResponse,
  QueryResult,
  QueryMetadata,
  ColumnInfo,
  QueryHistoryItem,
  QueryFeedback,
  QuerySuggestion,
  QueryError,
  QueryPerformanceMetrics,
  PromptDetails,
  PromptSection,
  WebSocketMessage,
  ExportOptions,
  ChartConfig,
  StreamingQueryRequest,
  StreamingQueryChunk,
  StreamingQueryMetadata,
  StreamingProgressUpdate,
  AdvancedStreamingRequest,
  StreamingQueryStartedEvent,
  StreamingQueryChunkEvent,
  StreamingQueryCompletedEvent,
  StreamingQueryErrorEvent,
  VisualizationRequest
} from './query';

// Visualization types
export type {
  AdvancedChartType,
  AdvancedVisualizationConfig,
  AnimationConfig,
  InteractionConfig,
  DrillDownConfig,
  TooltipConfig,
  ThemeConfig,
  ColorPalette,
  GradientConfig,
  FontConfig,
  BorderConfig,
  ShadowConfig,
  DataProcessingConfig,
  AggregationConfig,
  OutlierConfig,
  ExportConfig,
  AccessibilityConfig,
  PerformanceConfig,
  AdvancedDashboardConfig,
  DashboardLayout,
  GlobalFilter,
  DashboardTheme,
  ResponsiveConfig,
  BreakpointConfig,
  RealTimeConfig,
  AlertConfig,
  CollaborationConfig,
  SecurityConfig,
  AnalyticsConfig,
  ChartPerformanceMetrics,
  VisualizationRecommendation,
  PerformanceEstimate,
  VisualizationPreferences,
  DashboardPreferences,
  AdvancedVisualizationRequest,
  AdvancedVisualizationResponse,
  AdvancedDashboardRequest,
  AdvancedDashboardResponse,
  VisualizationRecommendationsRequest,
  VisualizationRecommendationsResponse,
  DataSummary,
  DashboardGenerationMetrics,
  RecommendationAnalysisMetrics
} from './visualization';

// Legacy visualization types from query.ts (for backward compatibility)
export type {
  VisualizationConfig,
  VisualizationMetadata,
  ChartTheme,
  ColorScheme,
  VisualizationOption,
  VisualizationOptionsResponse,
  ChartTypeInfo,
  InteractiveVisualizationConfig,
  FilterConfig,
  DrillDownOption,
  DashboardConfig,
  EnhancedChartTypeInfo
} from './query';

// Schema management types
export type {
  SchemaInfo,
  TableInfo,
  ColumnMetadata,
  IndexInfo,
  RelationshipInfo,
  SchemaValidationResult,
  SchemaOptimizationSuggestion,
  SchemaComparisonResult,
  SchemaBackupInfo,
  SchemaRestoreRequest,
  SchemaExportRequest,
  SchemaImportRequest,
  SchemaAnalysisResult,
  SchemaPerformanceMetrics,
  SchemaSecurityInfo,
  SchemaDocumentationInfo,
  SchemaVersionInfo,
  SchemaChangeLog,
  SchemaValidationRule,
  SchemaOptimizationRule,
  SchemaMaintenanceTask,
  SchemaMonitoringAlert,
  SchemaUsageStatistics,
  SchemaHealthCheck,
  SchemaRecommendation,
  SchemaComplianceCheck,
  SchemaAuditLog,
  SchemaBackupSchedule,
  SchemaRestorePoint,
  SchemaDeploymentInfo,
  SchemaEnvironmentInfo,
  SchemaConfigurationInfo,
  SchemaPermissionInfo,
  SchemaAccessLog,
  SchemaPerformanceReport,
  SchemaOptimizationReport,
  SchemaSecurityReport,
  SchemaComplianceReport,
  SchemaMaintenanceReport,
  SchemaUsageReport,
  SchemaHealthReport,
  SchemaAuditReport,
  SchemaBackupReport,
  SchemaDeploymentReport
} from './schemaManagement';

// DB Explorer types
export type {
  DatabaseConnection,
  DatabaseInfo,
  TablePreview,
  QueryExecutionResult,
  DatabaseSchema,
  ConnectionStatus,
  DatabaseMetrics,
  TableStatistics,
  ColumnStatistics,
  IndexStatistics,
  QueryPlan,
  ExecutionPlan,
  DatabaseHealth,
  PerformanceMetrics,
  SecurityAudit,
  BackupInfo,
  MaintenanceTask,
  DatabaseAlert,
  ConnectionPool,
  QueryCache,
  DatabaseConfiguration,
  UserPermissions,
  DatabaseLog,
  ErrorLog,
  PerformanceLog,
  SecurityLog,
  AuditLog,
  BackupLog,
  MaintenanceLog,
  ConnectionLog,
  QueryLog,
  SystemLog,
  DatabaseReport,
  PerformanceReport,
  SecurityReport,
  AuditReport,
  BackupReport,
  MaintenanceReport,
  UsageReport,
  HealthReport,
  ComplianceReport,
  OptimizationReport
} from './dbExplorer';

// ===== BRANDED TYPES =====
// Enhanced type safety with branded types
export type {
  Brand,
  UserId,
  QueryId,
  SessionId,
  RequestId,
  TableId,
  ColumnId,
  SchemaId,
  CacheKey,
  TabId,
  ConnectionId,
  DatabaseId,
  BackupId,
  TaskId,
  AlertId,
  LogId,
  ReportId,
  ConfigId,
  PermissionId,
  RoleId,
  GroupId,
  OrganizationId,
  TenantId,
  EnvironmentId,
  DeploymentId,
  VersionId,
  ChangeId,
  AuditId,
  SecurityId,
  ComplianceId,
  OptimizationId,
  MaintenanceId,
  PerformanceId,
  HealthId,
  UsageId,
  MetricId,
  StatisticId,
  AnalyticsId,
  InsightId,
  RecommendationId,
  PredictionId,
  ForecastId,
  TrendId,
  PatternId,
  AnomalyId,
  ThresholdId,
  BenchmarkId,
  BaselineId,
  TargetId,
  GoalId,
  ObjectiveId,
  KpiId,
  SlaId,
  SqlQuery,
  NaturalLanguageQuery,
  RegexPattern,
  JsonPath,
  XmlPath,
  CssSelector,
  XpathExpression,
  UrlPath,
  FilePath,
  DirectoryPath,
  FileName,
  FileExtension,
  MimeType,
  ContentType,
  Encoding,
  Charset,
  Language,
  Locale,
  TimeZone,
  Currency,
  CountryCode,
  RegionCode,
  PostalCode,
  PhoneNumber,
  EmailAddress,
  IpAddress,
  MacAddress,
  UserAgent,
  ApiKey,
  AccessToken,
  RefreshToken,
  JwtToken,
  CsrfToken,
  Nonce,
  Salt,
  Hash,
  Signature,
  Certificate,
  PrivateKey,
  PublicKey,
  SecretKey,
  EncryptionKey,
  DecryptionKey,
  Password,
  Passphrase,
  Pin,
  Otp,
  Totp,
  Hotp,
  Uuid,
  Guid,
  Timestamp,
  ISOTimestamp,
  UnixTimestamp,
  Duration,
  Interval,
  Timeout,
  Delay,
  Frequency,
  Rate,
  Percentage,
  Ratio,
  Score,
  Rating,
  Rank,
  Priority,
  Weight,
  Factor,
  Multiplier,
  Coefficient,
  Constant,
  Variable,
  Parameter,
  Argument,
  Option,
  Flag,
  Switch,
  Toggle,
  State,
  Status,
  Mode,
  Type,
  Kind,
  Category,
  Class,
  Group,
  Set,
  Collection,
  List,
  Array,
  ExecutionTimeMs,
  RowCount,
  ColumnCount,
  PageSize,
  PageNumber,
  ConfidenceScore,
  BrandedQueryExecution,
  BrandedUserSession,
  BrandedApiRequest
} from './branded';

// ===== COMMON API TYPES =====
// Generic API response types
export type {
  ApiResponse,
  PaginatedResponse
} from './query';

// ===== TYPE UTILITIES =====
// Common type utility patterns
export type Optional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;
export type RequiredFields<T, K extends keyof T> = T & Required<Pick<T, K>>;
export type Nullable<T> = T | null;
export type Maybe<T> = T | undefined;
export type DeepPartial<T> = {
  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];
};
export type DeepRequired<T> = {
  [P in keyof T]-?: T[P] extends object ? DeepRequired<T[P]> : T[P];
};
export type DeepReadonly<T> = {
  readonly [P in keyof T]: T[P] extends object ? DeepReadonly<T[P]> : T[P];
};
export type KeysOfType<T, U> = {
  [K in keyof T]: T[K] extends U ? K : never;
}[keyof T];
export type ValuesOfType<T, U> = T[KeysOfType<T, U>];
export type Mutable<T> = {
  -readonly [P in keyof T]: T[P];
};
export type PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;
export type RequiredBy<T, K extends keyof T> = T & Required<Pick<T, K>>;
